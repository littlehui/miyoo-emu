@
@ NEC V20/V30/V33 Emulator v0.002 - Assembler Output
@
@ Copyright (c) 2009 OopsWare, All rights reserved.
@ this is free for non-commercial use.
@

	.global ArmV33Irq
	.global ArmV33Run
	.global ArmV33CryptTable

ArmV33Irq:
	stmfd sp!,{r4-r12,lr}
	mov r7, r0			@ r7 = Pointer to Cpu Context
	mov r10, r1			@ r10 = Irq vector
	ldr r6, =JumpTables	@ r6 = Opcode Jump table
	ldrh r1, [r7, #0x1A]	@ load NEC flag part
	ldr r9, [r7, #0x20]		@ load ARM flag part
	orr r1, r1, r9
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x1A]
	bic r1, r1, #0x0300			@ clear IF and TF
	strh r1, [r7, #0x1A]
	mov r10, r10, lsl#2
	ldrh r1, [r7, #0x12]	@ load PS then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x18]	@ load IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10				@ load int verctor ip
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x18]	@ IP
	mov r11, r0
	add r0, r10, #2			@ load int verctor ps
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x12]	@ PS
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1
	str r4, [r7, #0x28]	@ pc
	ldmfd sp!,{r4-r12,pc}

ArmV33Run:
	stmfd sp!,{r4-r12,lr}
	mov r7, r0			@ r7 = Pointer to Cpu Context
	ldr r6, =JumpTables	@ r6 = Opcode Jump table
	ldr r5, [r7,#0x24]	@ r5 = Cycles
	ldr r4, [r7,#0x28]	@ r4 = Current PC + Memory Base
	ldr r9, [r7,#0x20]	@ r9 = flags  ___ANZCV
	mov r8, #0
	ldrb r2, [r4], #1
	ldr pc, [r6, r2, lsl#2]


ArmNecEnd:
	sub r4, r4, #1
ArmNecEndNoBack:
	str r5, [r7,#0x24]	@ Save Cycles
	str r4, [r7,#0x28]	@ Save Current PC + Memory Base
	ldrh r2, [r7,#0x12]	@ PS
	ldr r3, [r7,#0x2C]	@ Memory Base
	sub r4, r4, r2, lsl#4
	sub r4, r4, r3
	strh r4, [r7,#0x18]	@ Save ip
	str r9, [r7,#0x20]
	mov r0, r5			@ return cycles remain
	ldmfd sp!,{r4-r12,pc}

.ltorg

@--- BITOP branchs -----------------------------------

getEAByte:
	ldrb r2, [r4], #1
	add r3, r6, #0x400
	ldr pc, [r3, r2, lsl#2]

getEAWord:
	ldrb r2, [r4], #1
	add r3, r6, #0x800
	ldr pc, [r3, r2, lsl#2]

eab_00:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_01:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_02:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_03:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_04:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_05:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_06:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_07:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_08:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_09:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_0f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_10:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_11:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_12:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_13:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_14:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_15:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_16:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_17:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_18:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_19:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_1f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_20:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_21:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_22:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_23:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_24:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_25:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_26:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_27:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_28:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_29:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_2f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_30:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_31:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_32:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_33:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_34:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_35:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_36:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_37:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_38:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_39:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_3f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_40:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_41:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_42:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_43:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_44:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_45:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_46:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_47:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_48:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_49:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_4f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_50:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_51:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_52:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_53:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_54:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_55:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_56:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_57:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_58:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_59:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_5f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_60:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_61:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_62:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_63:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_64:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_65:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_66:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_67:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_68:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_69:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_6f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_70:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_71:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_72:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_73:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_74:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_75:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_76:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_77:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_78:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_79:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_7f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_80:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_81:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_82:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_83:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_84:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_85:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_86:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_87:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x00			@ AL
	mov pc, r11

eab_88:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_89:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_8f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x02			@ CL
	mov pc, r11

eab_90:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_91:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_92:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_93:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_94:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_95:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_96:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_97:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x04			@ DL
	mov pc, r11

eab_98:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_99:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_9f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x06			@ BL
	mov pc, r11

eab_a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x01			@ AH
	mov pc, r11

eab_a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x03			@ CH
	mov pc, r11

eab_b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x05			@ DH
	mov pc, r11

eab_b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r10, #0x07			@ BH
	mov pc, r11

eab_c0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x00			@ AL
	add pc, r11, #4

eab_c8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_c9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_ca:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_cb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_cc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_cd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_ce:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_cf:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x02			@ CL
	add pc, r11, #4

eab_d0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x04			@ DL
	add pc, r11, #4

eab_d8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_d9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_da:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_db:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_dc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_dd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_de:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_df:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x06			@ BL
	add pc, r11, #4

eab_e0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x01			@ AH
	add pc, r11, #4

eab_e8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_e9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_ea:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_eb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_ec:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_ed:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_ee:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_ef:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x03			@ CH
	add pc, r11, #4

eab_f0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x05			@ DH
	add pc, r11, #4

eab_f8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_f9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_fa:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_fb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_fc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_fd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_fe:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r10, #0x07			@ BH
	add pc, r11, #4

eab_ff:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r10, #0x07			@ BH
	add pc, r11, #4

eaw_00:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_01:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_02:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_03:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_04:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_05:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_06:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_07:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_08:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_09:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_0f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_10:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_11:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_12:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_13:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_14:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_15:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_16:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_17:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_18:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_19:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_1f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_20:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_21:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_22:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_23:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_24:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_25:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_26:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_27:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_28:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_29:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_2f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_30:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_31:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_32:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_33:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_34:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_35:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_36:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_37:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_38:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_39:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_3f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_40:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_41:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_42:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_43:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_44:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_45:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_46:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_47:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_48:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_49:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_4f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_50:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_51:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_52:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_53:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_54:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_55:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_56:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_57:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_58:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_59:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_5f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_60:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_61:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_62:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_63:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_64:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_65:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_66:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_67:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_68:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_69:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_6f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_70:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_71:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_72:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_73:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_74:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_75:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_76:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_77:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_78:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_79:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_7f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_80:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_81:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_82:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_83:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_84:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_85:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_86:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_87:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x00			@ AW
	mov pc, r11

eaw_88:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_89:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_8f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x02			@ CW
	mov pc, r11

eaw_90:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_91:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_92:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_93:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_94:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_95:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_96:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_97:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x04			@ DW
	mov pc, r11

eaw_98:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_99:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_9f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x06			@ BW
	mov pc, r11

eaw_a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x08			@ SP
	mov pc, r11

eaw_a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0a			@ BP
	mov pc, r11

eaw_b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0c			@ IX
	mov pc, r11

eaw_b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, #0x0e			@ IY
	mov pc, r11

eaw_c0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x00			@ AW
	add pc, r11, #4

eaw_c8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_c9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_ca:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_cb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_cc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_cd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_ce:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_cf:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x02			@ CW
	add pc, r11, #4

eaw_d0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x04			@ DW
	add pc, r11, #4

eaw_d8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_d9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_da:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_db:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_dc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_dd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_de:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_df:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x06			@ BW
	add pc, r11, #4

eaw_e0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x08			@ SP
	add pc, r11, #4

eaw_e8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_e9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_ea:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_eb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_ec:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_ed:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_ee:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_ef:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x0a			@ BP
	add pc, r11, #4

eaw_f0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x0c			@ IX
	add pc, r11, #4

eaw_f8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r8, #0x00
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_f9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r8, #0x02
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_fa:
	ldrh r0, [r7, #0x04]	@ DW
	mov r8, #0x04
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_fb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r8, #0x06
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_fc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r8, #0x08
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_fd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r8, #0x0a
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_fe:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r8, #0x0c
	mov r10, #0x0e			@ IY
	add pc, r11, #4

eaw_ff:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r8, #0x0e
	mov r10, #0x0e			@ IY
	add pc, r11, #4

@--- DIV branchs -------------------------------------

nec_div:
	mov	r10,r0
	mov	r11,r1
	mov	r4,#0
	eor	r2,r0,r1
	mov	r3,#1
	mov	r4,#0
	cmp	r1,#0
	rsbmi r1,r1,#0
	beq	div_by_0
	cmp	r0,#0
	rsbmi r0,r0,#0
	cmp	r0,r1
	blo	div_got_result
div_loop1:
	cmp	r1,#0x10000000
	cmplo r1,r0
	movlo r1,r1,lsl#4
	movlo r3,r3,lsl#4
	blo	div_loop1
div_bignum:
	cmp	r1,#0x80000000
	cmplo r1,r0
	movlo r1,r1,lsl#1
	movlo r3,r3,lsl#1
	blo	div_bignum
div_loop3:
	cmp	r0,r1
	subhs r0,r0,r1
	orrhs r4,r4,r3
	cmp	r0,r1,lsr#1
	subhs r0,r0,r1,lsr#1
	orrhs r4,r4,r3,lsr#1
	cmp	r0,r1,lsr#2
	subhs r0,r0,r1,lsr#2
	orrhs r4,r4,r3,lsr#2
	cmp	r0,r1,lsr#3
	subhs r0,r0,r1,lsr#3
	orrhs r4,r4,r3,lsr#3
	cmp	r0,#0
	movnes r3,r3,lsr#4
	movne r1,r1,lsr#4
	bne	div_loop3
	cmp	r2,#0
	rsbmi r4,r4,#0
div_got_result:
	mov r0,r4
	mul r1,r11,r4
	sub r1,r10,r1
div_by_0:
	ldmfd sp!,{r4,pc}

nec_udiv:
	mov	r10,r0
	mov	r11,r1
	cmp	r1,#0
	beq	udiv_by_0
	mov	r3,#1
	mov	r4,#0
	cmp	r0,r1
	blo	udiv_got_result
udiv_loop1:
	cmp	r1,#0x10000000
	cmplo r1,r0
	movlo r1,r1,lsl#4
	movlo r3,r3,lsl#4
	blo	udiv_loop1
udiv_bignum:
	cmp	r1,#0x80000000
	cmplo r1,r0
	movlo r1,r1,lsl#1
	movlo r3,r3,lsl#1
	blo	udiv_bignum
udiv_loop3:
	cmp	r0,r1
	subhs r0,r0,r1
	orrhs r4,r4,r3
	cmp	r0,r1,lsr #1
	subhs r0,r0,r1,lsr#1
	orrhs r4,r4,r3,lsr#1
	cmp	r0,r1,lsr #2
	subhs r0,r0,r1,lsr#2
	orrhs r4,r4,r3,lsr#2
	cmp	r0,r1,lsr #3
	subhs r0,r0,r1,lsr#3
	orrhs r4,r4,r3,lsr#3
	cmp	r0,#0
	movnes r3,r3,lsr#4
	movne r1,r1,lsr#4
	bne	udiv_loop3
udiv_got_result:
	mov r0,r4
	mul r1,r11,r4
	sub r1,r10,r1
udiv_by_0:
	ldmfd sp!,{r4,pc}

@--- Opcode branchs ----------------------------------

OP___3:
	sub r4, r4, #1
OP___2:
	sub r4, r4, #1
OP___1:
OP____:
	sub r4, r4, #1
	mov r0, r4
	mov lr, pc
	ldr pc, [r7, #0x5C]	@ Call UnrecognizedCallback()
	b ArmNecEndNoBack


OP00__:	@ "ADD EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM00
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM00:
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP01__:	@ "ADDW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM01
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM01:
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP02__:	@ "ADD Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM02
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM02:
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP03__:	@ "ADDW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM03
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM03:
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP04__:	@ "ADD AL,#u8"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	@ AL

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP05__:	@ "ADDW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	ldrh r1, [r7, #0x00]	@ AW

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP06__:	@ "PUSH DS1"
	ldrh r1, [r7, #0x10]	@ DS1
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP07__:	@ "POP DS1"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x10]	@ DS1

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP08__:	@ "OR EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM08
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM08:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP09__:	@ "ORW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM09
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM09:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0a__:	@ "OR Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0a
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0a:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0b__:	@ "ORW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0b
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0b:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0c__:	@ "OR AL,#u8"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	@ AL

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0d__:	@ "ORW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	ldrh r1, [r7, #0x00]	@ AW

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0e__:	@ "PUSH PS"
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f__:	@ "PRE 0x0F"
	ldrb r2, [r4], #1
	add r3, r6, #0xc00	@ call EA
	ldr pc, [r3, r2, lsl#2]

OP0f10:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	eor r3, r3, r3	@ nop
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r0, r0, lsr r1
	tst r0, #1
	mrs r3, cpsr	@ NZCV
	mov r9, r3, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f11:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	eor r3, r3, r3	@ nop
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r0, r0, lsr r1
	tst r0, #1
	mrs r3, cpsr	@ NZCV
	mov r9, r3, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f12:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f12
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	bic r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f12:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	bic r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f13:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f13
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	bic r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f13:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	bic r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f14:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f14
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	orr r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f14:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	orr r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f15:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f15
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	orr r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f15:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	orr r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f16:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f16
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	eor r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f16:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0x7
	mov r2, #1
	eor r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f17:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f17
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	eor r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f17:
	ldrb r1, [r7, #0x02]
	and r1, r1, #0xf
	mov r2, #1
	eor r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f18:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	eor r3, r3, r3	@ nop
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r0, r0, lsr r1
	tst r0, #1
	mrs r3, cpsr	@ NZCV
	mov r9, r3, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f19:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	eor r3, r3, r3	@ nop
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r0, r0, lsr r1
	tst r0, #1
	mrs r3, cpsr	@ NZCV
	mov r9, r3, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1a:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1a
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	bic r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1a:
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	bic r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1b:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1b
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	bic r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1b:
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	bic r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1c:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1c
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	orr r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1c:
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	orr r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1d:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1d
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	orr r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1d:
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	orr r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1e:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1e
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	eor r1, r0, r2, lsl r1
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1e:
	ldrb r1, [r4], #1
	and r1, r1, #0x7
	mov r2, #1
	eor r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f1f:
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f1f
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	eor r1, r0, r2, lsl r1
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f1f:
	ldrb r1, [r4], #1
	and r1, r1, #0xf
	mov r2, #1
	eor r1, r0, r2, lsl r1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f20:
	ldrb r0, [r7, #0x02]
	add r0, r0, #1
	mov r8, r0, lsr#1		@ r8: count
	bic r9, r9, #6			@ Clear ZF and CF
	cmp r8, r0
	beq add4s_end
	ldrh r0, [r7, #0x0e]
	ldrh r1, [r7, #0x10]
	add r10, r0, r1, lsl#4	@ r10: DS1:IY
	ldrh r0, [r7, #0x0c]
	ldrh r1, [r7, #0x16]
	add r11, r0, r1, lsl#4	@ r11: DS0:IX
	stmfd sp!,{r4}
add4s_loop:
	mov r0, r10
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r4, r0
	mov r0, r11
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	sub r2, r6, #0x100		@ HexToDec table
	ldrb r1, [r2, r0]		@ tmp2 convert to decimal value
	ldrb r0, [r2, r4]		@ tmp convert to decimal value
	tst r9, #2
	addne r1, r1, #1		@ add CF
	adds r0, r0, r1
	orreq r9, r9, #4		@ set ZF
	bicne r9, r9, #4		@ clear ZF
	cmp r0, #99
	orrgt r9, r9, #2		@ set CF
	bicle r9, r9, #2		@ clear CF
	sub r2, r6, #0x400		@ DecToHexEx table
	ldrb r1, [r2, r0]		@ tmp2 convert to decimal value
	mov r0, r10
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]
	add r10, r10, #1
	add r11, r11, #1
	sub r5, r5, #18			@ dec cycles
	subs r8, r8, #1
	bgt add4s_loop
	ldmfd sp!,{r4}
add4s_end:

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f22:
	ldrb r0, [r7, #0x02]
	add r0, r0, #1
	mov r8, r0, lsr#1		@ r8: count
	bic r9, r9, #6			@ Clear ZF and CF
	cmp r8, r0
	beq sub4s_end
	ldrh r0, [r7, #0x0e]
	ldrh r1, [r7, #0x10]
	add r10, r0, r1, lsl#4	@ r10: DS1:IY
	ldrh r0, [r7, #0x0c]
	ldrh r1, [r7, #0x16]
	add r11, r0, r1, lsl#4	@ r11: DS0:IX
	stmfd sp!,{r4}
sub4s_loop:
	mov r0, r10
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r4, r0
	mov r0, r11
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	sub r2, r6, #0x100		@ HexToDec table
	ldrb r1, [r2, r0]		@ tmp2 convert to decimal value
	ldrb r0, [r2, r4]		@ tmp convert to decimal value
	tst r9, #2
	addne r1, r1, #1		@ add CF
	cmp r0, r1
	addlt r0, r0, #100
	orrlt r9, r9, #2		@ set CF
	bicge r9, r9, #2		@ clear CF
	subs r0, r0, r1
	orreq r9, r9, #4		@ set ZF
	bicne r9, r9, #4		@ clear ZF
	and r0, r0, #0xff
	sub r2, r6, #0x200		@ DecToHex table
	ldrb r1, [r2, r0]		@ tmp2 convert to decimal value
	mov r0, r10
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]
	add r10, r10, #1
	add r11, r11, #1
	sub r5, r5, #18			@ dec cycles
	subs r8, r8, #1
	bgt sub4s_loop
	ldmfd sp!,{r4}
sub4s_end:

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f26:
	ldrb r0, [r7, #0x02]
	add r0, r0, #1
	mov r8, r0, lsr#1		@ r8: count
	bic r9, r9, #6			@ Clear ZF and CF
	cmp r8, r0
	beq cmp4s_end
	ldrh r0, [r7, #0x0e]
	ldrh r1, [r7, #0x10]
	add r10, r0, r1, lsl#4	@ r10: DS1:IY
	ldrh r0, [r7, #0x0c]
	ldrh r1, [r7, #0x16]
	add r11, r0, r1, lsl#4	@ r11: DS0:IX
	stmfd sp!,{r4}
cmp4s_loop:
	mov r0, r10
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r4, r0
	mov r0, r11
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	sub r2, r6, #0x100		@ HexToDec table
	ldrb r1, [r2, r0]		@ tmp2 convert to decimal value
	ldrb r0, [r2, r4]		@ tmp convert to decimal value
	tst r9, #2
	addne r1, r1, #1		@ add CF
	cmp r0, r1
	addlt r0, r0, #100
	orrlt r9, r9, #2		@ set CF
	bicge r9, r9, #2		@ clear CF
	subs r0, r0, r1
	orreq r9, r9, #4		@ set ZF
	bicne r9, r9, #4		@ clear ZF
	add r10, r10, #1
	add r11, r11, #1
	sub r5, r5, #14			@ dec cycles
	subs r8, r8, #1
	bgt cmp4s_loop
	ldmfd sp!,{r4}
cmp4s_end:

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f28:
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM0f28
	mov r0, r0, lsl#4
	ldrb r1, [r7, #0x00]
	mov r1, r1, ror#4
	orr r0, r0, r1, lsr#28
	mov r2, r0, lsr#8
	orr r1, r2, r1, lsl#4
	strb r1, [r7, #0x00]
	strb r0, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #9
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM0f28:
	mov r0, r0, lsl#4
	ldrb r1, [r7, #0x00]
	mov r1, r1, ror#4
	orr r0, r0, r1, lsr#28
	mov r2, r0, lsr#8
	orr r1, r2, r1, lsl#4
	strb r1, [r7, #0x00]
	mov r1, r0
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP0f92:

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP10__:	@ "ADC EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM10
	ldrb r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM10:
	ldrb r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP11__:	@ "ADCW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM11
	ldrh r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM11:
	ldrh r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP12__:	@ "ADC Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM12
	ldrb r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM12:
	ldrb r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP13__:	@ "ADCW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM13
	ldrh r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM13:
	ldrh r1, [r7, r10]
	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP14__:	@ "ADC AL,#u8"
	mov r8, #0
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP15__:	@ "ADCW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r1, r0, r1, lsl#8
	ldrh r0, [r7, #0x00]	@ AW

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP16__:	@ "PUSH SS"
	ldrh r1, [r7, #0x14]	@ SS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP17__:	@ "POP SS"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x14]	@ SS

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP18__:	@ "SBB EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM18
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM18:
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP19__:	@ "SBBW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM19
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM19:
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1a__:	@ "SBB Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM1a
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM1a:
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1b__:	@ "SBBW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM1b
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM1b:
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1c__:	@ "SBB AL,#u8"
	mov r8, #0
	ldrb r1, [r4], #1
	ldrb r0, [r7, #0x00]	@ AL

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1d__:	@ "SBBW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r1, r0, r1, lsl#8
	ldrh r0, [r7, #0x00]	@ AW

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1e__:	@ "PUSH DS0"
	ldrh r1, [r7, #0x16]	@ DS0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP1f__:	@ "POP DS0"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x16]	@ DS0

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP20__:	@ "AND EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM20
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM20:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP21__:	@ "ANDW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM21
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM21:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP22__:	@ "AND Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM22
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM22:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP23__:	@ "ANDW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM23
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM23:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP24__:	@ "AND AL,#u8"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	@ AL

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP25__:	@ "ANDW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	ldrh r1, [r7, #0x00]	@ AW

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP26__:	@ "ES	prefix(DS1)"
	ldrh r8, [r7, #0x10]		@ DS1
	orr r8, r8, #0x80000000
	ldrb r3, [r4], #1
	sub r5, r5, #2
	ldr pc, [r6, r3, asl#2]

OP27__:	@ "ADJ4 +6"
	ldrb r0, [r7, #0x00]
	and r3, r9, #0x10			@ AF
	and r2, r0, #0xf
	cmp r2, #9
	orrgt r3, r3, #1
	cmp r3, #0
	addne r0, r0, #6			@ + param1
	orrne r9, r9, #0x10			@ set AF
	and r3, r0, #0x100			@ check CF
	orrne r9, r9, r3, lsr#7		@ set CF
	and r3, r9, #0x02			@ CF
	and r0, r0, #0xff
	cmp r0, #0x9f
	orrgt r3, r3, #1
	cmp r3, #0
	addne r0, r0, #0x60			@ + param2
	orrne r9, r9, #0x02			@ set CF
	and r9, r9, #0x12			@ keep AF and CF
	ands r0, r0, #0xff
	orreq r9, r9, #0x04			@ set ZF
	orrs r9, r9, r0, lsl#24		@ set P Value
	orrmi r9, r9, #0x08			@ set SF
	strb r0, [r7, #0x00]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP28__:	@ "SUB EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM28
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM28:
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP29__:	@ "SUBW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM29
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM29:
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP2a__:	@ "SUB Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM2a
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM2a:
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP2b__:	@ "SUBW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM2b
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM2b:
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP2c__:	@ "SUB AL,#u8"
	mov r8, #0
	ldrb r1, [r4], #1
	ldrb r0, [r7, #0x00]	@ AL

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP2d__:	@ "SUBW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r1, r0, r1, lsl#8
	ldrh r0, [r7, #0x00]	@ AW

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP2e__:	@ "CS prefix(PS)"
	ldrh r8, [r7, #0x12]		@ PS
	orr r8, r8, #0x80000000
	ldrb r3, [r4], #1
	sub r5, r5, #2
	ldr pc, [r6, r3, asl#2]

OP2f__:	@ "ADJ4 -6"
	ldrb r0, [r7, #0x00]
	and r3, r9, #0x10			@ AF
	and r2, r0, #0xf
	cmp r2, #9
	orrgt r3, r3, #1
	cmp r3, #0
	subne r0, r0, #6			@ - param1
	orrne r9, r9, #0x10			@ set AF
	and r3, r0, #0x100			@ check CF
	orrne r9, r9, r3, lsr#7		@ set CF
	and r3, r9, #0x02			@ CF
	and r0, r0, #0xff
	cmp r0, #0x9f
	orrgt r3, r3, #1
	cmp r3, #0
	subne r0, r0, #0x60			@ - param2
	orrne r9, r9, #0x02			@ set CF
	and r9, r9, #0x12			@ keep AF and CF
	ands r0, r0, #0xff
	orreq r9, r9, #0x04			@ set ZF
	orrs r9, r9, r0, lsl#24		@ set P Value
	orrmi r9, r9, #0x08			@ set SF
	strb r0, [r7, #0x00]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP30__:	@ "XOR EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM30
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#24
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM30:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP31__:	@ "XORW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM31
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#16
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM31:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP32__:	@ "XOR Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM32
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM32:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#24
	strb r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP33__:	@ "XORW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM33
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM33:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#16
	strh r1, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP34__:	@ "XOR AL,#u8"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	@ AL

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP35__:	@ "XORW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	ldrh r1, [r7, #0x00]	@ AW

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF
	mov r1, r0, lsr#16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP36__:	@ "SS prefix(SS)"
	ldrh r8, [r7, #0x14]		@ SS
	orr r8, r8, #0x80000000
	ldrb r3, [r4], #1
	sub r5, r5, #2
	ldr pc, [r6, r3, asl#2]

OP37__:	@ "ADJB +6"
	ldrb r0, [r7, #0x00]
	tst r9, #0x10				@ AF
	bne jRM37
	and r3, r0, #0xf
	cmp r3, #9
	bgt jRM37
	bic r9, r9, #0x12			@ Clean AF and CF
	strb r3, [r7, #0x00]		@ r3 = r0 & 0xf

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM37:
	ldrb r1, [r7, #0x01]
	cmp r0, #0xf9
	addgt r1, r1, #2
	addle r1, r1, #1
	strb r1, [r7, #0x01]
	add r0, r0, #6
	and r0, r0, #0xf
	strb r0, [r7, #0x00]
	orr r9, r9, #0x12			@ Set AF and CF

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP38__:	@ "CMP EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM38
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM38:
	ldrb r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP39__:	@ "CMPW EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM39
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM39:
	ldrh r1, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP3a__:	@ "CMP Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM3a
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM3a:
	mov r1, r0
	ldrb r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP3b__:	@ "CMPW Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM3b
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM3b:
	mov r1, r0
	ldrh r0, [r7, r10]
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP3c__:	@ "CMP AL,#u8"
	mov r8, #0
	ldrb r1, [r4], #1
	ldrb r0, [r7, #0x00]	@ AL

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP3d__:	@ "CMPW AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r1, r0, r1, lsl#8
	ldrh r0, [r7, #0x00]	@ AW

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP3e__:	@ "DS prefix(DS0)"
	ldrh r8, [r7, #0x16]		@ DS0
	orr r8, r8, #0x80000000
	ldrb r3, [r4], #1
	sub r5, r5, #2
	ldr pc, [r6, r3, asl#2]

OP3f__:	@ "ADJB -6"
	ldrb r0, [r7, #0x00]
	tst r9, #0x10				@ AF
	bne jRM3f
	and r3, r0, #0xf
	cmp r3, #9
	bgt jRM3f
	bic r9, r9, #0x12			@ Clean AF and CF
	strb r3, [r7, #0x00]		@ r3 = r0 & 0xf

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM3f:
	ldrb r1, [r7, #0x01]
	cmp r0, #6
	sublt r1, r1, #2
	subge r1, r1, #1
	strb r1, [r7, #0x01]
	sub r0, r0, #6
	and r0, r0, #0xf
	strb r0, [r7, #0x00]
	orr r9, r9, #0x12			@ Set AF and CF

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP40__:	@ "INC AW"
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP41__:	@ "INC CW"
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP42__:	@ "INC DW"
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP43__:	@ "INC BW"
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP44__:	@ "INC SP"
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP45__:	@ "INC BP"
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP46__:	@ "INC IX"
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP47__:	@ "INC IY"
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0, lsl #16
	adds r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP48__:	@ "DEC AW"
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP49__:	@ "DEC CW"
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4a__:	@ "DEC DW"
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4b__:	@ "DEC BW"
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4c__:	@ "DEC SP"
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4d__:	@ "DEC BP"
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4e__:	@ "DEC IX"
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP4f__:	@ "DEC IY"
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0, lsl #16
	subs r1, r1, #0x10000
	mrs r2, cpsr
	mov r9, r1, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r0, r1, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP50__:	@ "PUSH AW"
	ldrh r1, [r7, #0x00]	;@ AW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP51__:	@ "PUSH CW"
	ldrh r1, [r7, #0x02]	;@ CW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP52__:	@ "PUSH DW"
	ldrh r1, [r7, #0x04]	;@ DW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP53__:	@ "PUSH BW"
	ldrh r1, [r7, #0x06]	;@ BW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP54__:	@ "PUSH SP"
	ldrh r1, [r7, #0x08]	;@ SP
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP55__:	@ "PUSH BP"
	ldrh r1, [r7, #0x0a]	;@ BP
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP56__:	@ "PUSH IX"
	ldrh r1, [r7, #0x0c]	;@ IX
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP57__:	@ "PUSH IY"
	ldrh r1, [r7, #0x0e]	;@ IY
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP58__:	@ "POP AW"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x00]	;@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP59__:	@ "POP CW"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x02]	;@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5a__:	@ "POP DW"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x04]	;@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5b__:	@ "POP BW"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x06]	;@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5c__:	@ "POP SP"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x08]	;@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5d__:	@ "POP BP"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0a]	;@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5e__:	@ "POP IX"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0c]	;@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP5f__:	@ "POP IY"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0e]	;@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP60__:	@ "PUSH ALL"
	ldrh r11, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x00]	@ AW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x02]	@ CW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x04]	@ DW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x06]	@ BW
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r1, r11				@ SP
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x0a]	@ BP
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x0c]	@ IX
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x0e]	@ IY
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP61__:	@ "POP ALL"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0e]	@ IY
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0c]	@ IX
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x0a]	@ BP
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x06]	@ BW
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x04]	@ DW
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x02]	@ CW
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #22
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP6b__:	@ "MUL Rw,EA,#s8"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM6b
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	ldrsb r1, [r4], #1
	mul r2, r0, r1
	mov r3, r2, asr#15
	mov r9, #0x3		@ CF OF
	cmp r3, #0
	moveq r9, #0
	cmp r3, #-1
	moveq r9, #0
	strh r2, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #31
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM6b:
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	ldrsb r1, [r4], #1
	mul r2, r0, r1
	mov r3, r2, asr#15
	mov r9, #0x3		@ CF OF
	cmp r3, #0
	moveq r9, #0
	cmp r3, #-1
	moveq r9, #0
	strh r2, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #39
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP70__:	@ "JO + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x1	;@ V flag
	subne r5, r5, #3
	addne r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP71__:	@ "JNO + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x1	;@ V flag
	subeq r5, r5, #3
	addeq r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP72__:	@ "JC + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x2	;@ C flag
	subne r5, r5, #3
	addne r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP73__:	@ "JNC + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x2	;@ C flag
	subeq r5, r5, #3
	addeq r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP74__:	@ "JZ + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x4	;@ Z flag
	subne r5, r5, #3
	addne r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP75__:	@ "JNZ + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x4	;@ Z flag
	subeq r5, r5, #3
	addeq r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP76__:	@ "JCE + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x6	;@ C Z flag
	subne r5, r5, #3
	addne r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP77__:	@ "JNCE + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x6	;@ C Z flag
	subeq r5, r5, #3
	addeq r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP78__:	@ "JS + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x8	;@ N flag
	subne r5, r5, #3
	addne r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP79__:	@ "JNS + #s8"
	ldrsb r3, [r4], #1
	tst r9, #0x8	;@ N flag
	subeq r5, r5, #3
	addeq r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP7c__:	@ "JL + #s8"
	ldrsb r3, [r4], #1
	mov r0, r9, lsl#28
	msr cpsr_f, r0
	sublt r5, r5, #3
	addlt r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP7d__:	@ "JNL + #s8"
	ldrsb r3, [r4], #1
	mov r0, r9, lsl#28
	msr cpsr_f, r0
	subge r5, r5, #3
	addge r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP7e__:	@ "JLE + #s8"
	ldrsb r3, [r4], #1
	mov r0, r9, lsl#28
	msr cpsr_f, r0
	suble r5, r5, #3
	addle r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP7f__:	@ "JNLE + #s8"
	ldrsb r3, [r4], #1
	mov r0, r9, lsl#28
	msr cpsr_f, r0
	subgt r5, r5, #3
	addgt r4, r4, r3

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80__:	@ "PRE 0x80"
	ldrb r2, [r4], #1
	add r3, r6, #0x1000	@ call EA
	ldr pc, [r3, r2, lsl#2]

OP8000:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8001:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8002:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8003:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8004:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8005:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8006:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8007:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8008:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8009:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP800f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8010:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8011:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8012:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8013:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8014:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8015:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8016:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8017:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8018:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8019:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP801f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8020:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8021:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8022:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8023:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8024:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8025:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8026:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8027:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8028:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8029:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP802f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8030:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8031:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8032:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8033:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8034:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8035:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8036:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8037:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8038:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8039:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP803f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8040:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8041:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8042:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8043:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8044:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8045:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8046:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8047:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8048:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8049:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP804f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8050:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8051:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8052:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8053:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8054:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8055:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8056:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8057:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8058:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8059:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP805f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8060:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8061:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8062:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8063:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8064:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8065:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8066:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8067:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8068:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8069:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP806f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8070:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8071:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8072:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8073:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8074:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8075:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8076:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8077:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8078:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8079:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP807f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8080:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8081:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8082:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8083:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8084:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8085:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8086:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8087:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8088:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8089:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP808f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8090:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8091:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8092:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8093:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8094:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8095:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8096:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8097:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8098:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8099:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP809f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c0:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c1:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c2:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c3:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c4:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c5:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c6:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c7:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c8:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80c9:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ca:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80cb:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80cc:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80cd:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ce:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80cf:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	orrs r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d0:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d1:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d2:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d3:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d4:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d5:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d6:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d7:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	adds r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d8:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80d9:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80da:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80db:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80dc:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80dd:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80de:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80df:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x100
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e0:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e1:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e2:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e3:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e4:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e5:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e6:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e7:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e8:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80e9:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ea:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80eb:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ec:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ed:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ee:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ef:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f0:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f1:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f2:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f3:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f4:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f5:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f6:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f7:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	mov r0, r0, lsl#24
	eors r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f8:
	ldrb r0, [r7, #0x00]	@ AL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80f9:
	ldrb r0, [r7, #0x02]	@ CL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80fa:
	ldrb r0, [r7, #0x04]	@ DL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80fb:
	ldrb r0, [r7, #0x06]	@ BL

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80fc:
	ldrb r0, [r7, #0x01]	@ AH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80fd:
	ldrb r0, [r7, #0x03]	@ CH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80fe:
	ldrb r0, [r7, #0x05]	@ DH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP80ff:
	ldrb r0, [r7, #0x07]	@ BH

	ldrb r1, [r4], #1

	eor r3, r0, r1
	mov r0, r0, lsl#24
	subs r0, r0, r1, lsl#24
	mrs r2, cpsr			@ NZCV
	orr r9, r0, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#24	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81__:	@ "PRE 0x81"
	ldrb r2, [r4], #1
	add r3, r6, #0x1400	@ call EA
	ldr pc, [r3, r2, lsl#2]

OP8100:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8101:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8102:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8103:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8104:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8105:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8106:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8107:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8108:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8109:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP810f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8110:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8111:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8112:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8113:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8114:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8115:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8116:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8117:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8118:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8119:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP811f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8120:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8121:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8122:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8123:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8124:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8125:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8126:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8127:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8128:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8129:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP812f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8130:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8131:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8132:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8133:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8134:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8135:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8136:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8137:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8138:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8139:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP813f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8140:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8141:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8142:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8143:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8144:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8145:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8146:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8147:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8148:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8149:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP814f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8150:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8151:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8152:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8153:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8154:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8155:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8156:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8157:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8158:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8159:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP815f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8160:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8161:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8162:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8163:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8164:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8165:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8166:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8167:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8168:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8169:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP816f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8170:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8171:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8172:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8173:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8174:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8175:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8176:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8177:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8178:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8179:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP817f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8180:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8181:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8182:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8183:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8184:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8185:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8186:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8187:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8188:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8189:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP818f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8190:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8191:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8192:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8193:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8194:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8195:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8196:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8197:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8198:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8199:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP819f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81c9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ca:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81cb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81cc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81cd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ce:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81cf:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81d9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81da:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81db:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81dc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81dd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81de:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81df:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81e9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ea:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81eb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ec:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ed:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ee:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ef:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81f9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81fa:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81fb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81fc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81fd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81fe:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP81ff:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r1, [r4], #1	;@ fetch word
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83__:	@ "PRE 0x83"
	ldrb r2, [r4], #1
	add r3, r6, #0x1800	@ call EA
	ldr pc, [r3, r2, lsl#2]

OP8300:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8301:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8302:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8303:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8304:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8305:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8306:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8307:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8308:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8309:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP830f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8310:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8311:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8312:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8313:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8314:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8315:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8316:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8317:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8318:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8319:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP831f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8320:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8321:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8322:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8323:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8324:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8325:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8326:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8327:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8328:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8329:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP832f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8330:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8331:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8332:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8333:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8334:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8335:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8336:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8337:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8338:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8339:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP833f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8340:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8341:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8342:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8343:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8344:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8345:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8346:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8347:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8348:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8349:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP834f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8350:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8351:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8352:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8353:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8354:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8355:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8356:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8357:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8358:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8359:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP835f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8360:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8361:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8362:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8363:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8364:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8365:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8366:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8367:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8368:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8369:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP836f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8370:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8371:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8372:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8373:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8374:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8375:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8376:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8377:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8378:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8379:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP837f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8380:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8381:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8382:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8383:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8384:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8385:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8386:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8387:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8388:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8389:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP838f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8390:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8391:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8392:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8393:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8394:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8395:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8396:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8397:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8398:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8399:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP839f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83c9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ca:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83cb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83cc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83cd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ce:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83cf:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	orrs r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r1, r0
	tst r9, #0x2		@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83d9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83da:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83db:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83dc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83dd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83de:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83df:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	tst r9, #0x2			@ check CF
	addne r1, r1, #1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	tst r1, #0x10000
	orrne r9, r9, #0x2
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83e9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ea:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83eb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ec:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ed:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ee:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ef:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	mov r0, r0, lsl#16
	eors r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	bic r9, r9, #3		@ Clear CF VF

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83f9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83fa:
	ldrh r0, [r7, #0x04]	@ DW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83fb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83fc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83fd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83fe:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP83ff:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrsb r1, [r4], #1	;@ fetch signed byte as word
	mov r1, r1, lsl#16
	mov r1, r1, lsr#16

	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP84__:	@ "TST EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM84
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM84:
	ldrb r1, [r7, r10]
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP85__:	@ "TST EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM85
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM85:
	ldrh r1, [r7, r10]
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP86__:	@ "XCHG EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM86
	ldrb r1, [r7, r10]
	strb r0, [r7, r10]
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM86:
	ldrb r1, [r7, r10]
	strb r0, [r7, r10]
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #8
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP87__:	@ "XCHG EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM87
	ldrh r1, [r7, r10]
	strh r0, [r7, r10]
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM87:
	ldrh r1, [r7, r10]
	strh r0, [r7, r10]
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #8
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP88__:	@ "MOV EA,Rl"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM88
	ldrb r1, [r7, r10]
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM88:
	ldrb r1, [r7, r10]
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP89__:	@ "MOV EA,Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM89
	ldrh r1, [r7, r10]
	strb r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM89:
	ldrh r1, [r7, r10]
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8a__:	@ "MOV Rl,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM8a
	strb r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM8a:
	strb r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8b__:	@ "MOV Rw,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM8b
	strh r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM8b:
	strh r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8c__:	@ "MOV EA,Rs"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM8c
	add r10, r10, #0x10
	ldrh r1, [r7, r10]
	strh r1, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM8c:
	add r10, r10, #0x10
	ldrh r1, [r7, r10]
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d__:	@ "LEA Rw"
	ldrb r2, [r4], #1
	add r3, r6, #0x1c00	@ call EA
	ldr pc, [r3, r2, lsl#2]

OP8d00:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d01:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d02:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d03:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d04:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d05:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d06:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d07:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d08:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d09:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d0f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d10:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d11:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d12:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d13:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d14:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d15:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d16:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d17:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d18:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d19:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d1f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d20:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d21:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d22:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d23:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d24:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d25:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d26:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d27:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d28:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d29:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d2f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d30:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d31:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d32:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d33:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d34:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d35:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d36:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d37:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d38:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d39:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d3f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d40:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d41:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d42:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d43:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d44:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d45:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d46:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d47:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d48:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d49:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d4f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d50:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d51:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d52:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d53:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d54:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d55:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d56:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d57:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d58:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d59:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d5f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d60:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d61:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d62:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d63:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d64:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d65:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d66:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d67:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d68:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d69:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d6f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d70:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d71:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d72:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d73:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d74:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d75:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d76:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d77:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d78:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d79:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d7f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d80:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d81:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d82:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d83:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d84:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d85:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d86:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d87:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x00]	@ store EO into AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d88:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d89:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d8f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x02]	@ store EO into CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d90:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d91:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d92:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d93:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d94:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d95:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d96:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d97:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x04]	@ store EO into DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d98:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d99:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9a:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9b:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9c:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9d:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9e:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8d9f:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x06]	@ store EO into BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da0:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da1:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da2:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da3:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da4:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da5:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da6:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da7:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x08]	@ store EO into SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da8:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8da9:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8daa:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dab:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dac:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dad:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dae:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8daf:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0a]	@ store EO into BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db0:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db1:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db2:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db3:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db4:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db5:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db6:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db7:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0c]	@ store EO into IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db8:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8db9:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dba:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dbb:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dbc:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dbd:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dbe:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8dbf:
	mov r8, #0x80000000		@ prefix seg to zero
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	strh r8, [r7, #0x0e]	@ store EO into IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8e__:	@ "MOV Rs,EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM8e
	add r10, r10, #0x10
	strh r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM8e:
	add r10, r10, #0x10
	strh r0, [r7, r10]

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP8f__:	@ "POP EA"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRM8f
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #21
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRM8f:
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #21
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP90__:	@ "NOP"

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP91__:	@ "XCHG AW,CW"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, CW
	ldrh r1, [r7, #0x02]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x02]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP92__:	@ "XCHG AW,DW"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, DW
	ldrh r1, [r7, #0x04]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x04]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP93__:	@ "XCHG AW,BW"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, BW
	ldrh r1, [r7, #0x06]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x06]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP94__:	@ "XCHG AW,SP"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, SP
	ldrh r1, [r7, #0x08]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x08]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP95__:	@ "XCHG AW,BP"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, BP
	ldrh r1, [r7, #0x0a]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x0a]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP96__:	@ "XCHG AW,IX"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, IX
	ldrh r1, [r7, #0x0c]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x0c]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP97__:	@ "XCHG AW,IY"
	ldrh r0, [r7, #0x00]	;@ SWAP AW, IY
	ldrh r1, [r7, #0x0e]
	strh r1, [r7, #0x00]
	strh r0, [r7, #0x0e]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP98__:	@ "CBW AW"
	ldrb r0, [r7, #0x00]	@ AL
	mov r0, r0, lsl#24
	mov r0, r0, asr#31
	strb r0, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP99__:	@ "CWD DW"
	ldrb r0, [r7, #0x01]	@ AH
	mov r0, r0, lsl#24
	mov r0, r0, asr#31
	strh r0, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP9a__:	@ "CALL [#u16:#u16]"
	ldrb r0, [r4], #1		@ fetch new ip
	ldrb r1, [r4], #1
	orr r10, r0, r1, lsl#8
	ldrb r0, [r4], #1		@ fetch new ps
	ldrb r1, [r4], #1
	orr r11, r0, r1, lsl#8
	ldrh r1, [r7, #0x12]	@ load PS then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ load PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r11, [r7, #0x12]	@ store PS
	mov r0, r11
	mov r1, r10
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #9
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP9c__:	@ "PUSH flags"
	ldrh r1, [r7, #0x1A]	@ load NEC flag part
	orr r1, r1, r9
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OP9d__:	@ "POP flags"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	and r9, r0, #0xff	@ flags
	and r0, r0, #0xff00
	strh r0, [r7,#0x1A]	@ nec flags

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa0__:	@ "MOV AL,[DS0:#u16]"
	ldrb r10, [r4], #1
	ldrb r3, [r4], #1
	orr r10, r10, r3, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	strb r0, [r7, #0x00]	;@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa1__:	@ "MOV AW,[DS0:#u16]"
	ldrb r10, [r4], #1
	ldrb r3, [r4], #1
	orr r10, r10, r3, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x00]	;@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa2__:	@ "MOV [DS0:#u16],AL"
	ldrb r10, [r4], #1
	ldrb r3, [r4], #1
	orr r10, r10, r3, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldrb r1, [r7, #0x00]	;@ AL
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa3__:	@ "MOV [DS0:#u16],AW"
	ldrb r10, [r4], #1
	ldrb r3, [r4], #1
	orr r10, r10, r3, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldrh r1, [r7, #0x00]	;@ AW
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa8__:	@ "TST AL,#u8"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	@ AL

	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPa9__:	@ "TST AW,#u16"
	mov r8, #0
	ldrb r0, [r4], #1
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	ldrh r1, [r7, #0x00]	@ AW

	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPaa__:	@ "STOS EA,AL"
	ldrh r8, [r7, #0x10]	@ DS1
	ldrh r11, [r7, #0x0e]	@ IY
	ldrb r1, [r7, #0x00]	@ AL
	add r0, r11, r8, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	addeq r11, r11, #1
	subne r11, r11, #1
	strh r11, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPab__:	@ "STOS EA,AW"
	ldrh r8, [r7, #0x10]	@ DS1
	ldrh r11, [r7, #0x0e]	@ IY
	ldrh r1, [r7, #0x00]	@ AW
	add r0, r11, r8, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	addeq r11, r11, #2
	subne r11, r11, #2
	strh r11, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPac__:	@ "LODSB"
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]	@ DS0
	ldrh r11, [r7, #0x0c]	@ IX
	add r0, r11, r8, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	strb r0, [r7, #0x00]	@ AL
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	addeq r11, r11, #1
	subne r11, r11, #1
	strh r11, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPad__:	@ "LODSW"
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]	@ DS0
	ldrh r11, [r7, #0x0c]	@ IX
	add r0, r11, r8, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x00]	@ AW
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	addeq r11, r11, #2
	subne r11, r11, #2
	strh r11, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb0__:	@ "MOV AL,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x00]	;@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb1__:	@ "MOV CL,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x02]	;@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb2__:	@ "MOV DL,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x04]	;@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb3__:	@ "MOV BL,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x06]	;@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb4__:	@ "MOV AH,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x01]	;@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb5__:	@ "MOV CH,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x03]	;@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb6__:	@ "MOV DH,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x05]	;@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb7__:	@ "MOV BH,#u8"
	ldrb r0, [r4], #1	;@ fetch byte
	strb r0, [r7, #0x07]	;@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb8__:	@ "MOV AW,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x00]	;@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPb9__:	@ "MOV CW,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x02]	;@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPba__:	@ "MOV DW,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x04]	;@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPbb__:	@ "MOV BW,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x06]	;@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPbc__:	@ "MOV SP,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x08]	;@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPbd__:	@ "MOV BP,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x0a]	;@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPbe__:	@ "MOV IX,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x0c]	;@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPbf__:	@ "MOV IY,#u16"
	ldrb r0, [r4], #1	;@ fetch word
	ldrb r1, [r4], #1
	orr r0, r0, r1, lsl#8
	strh r0, [r7, #0x0e]	;@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0__:	@ "SHFT #u8"
	ldrb r2, [r4], #1
	add r3, r6, #0x2000	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPc000:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc001:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc002:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc003:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc004:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc005:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc006:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc007:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc008:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc009:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc00f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc010:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc011:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc012:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc013:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc014:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc015:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc016:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc017:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc018:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc019:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc01f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc020:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc021:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc022:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc023:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc024:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc025:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc026:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc027:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc028:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc029:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc02f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc038:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc039:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc03f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc040:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc041:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc042:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc043:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc044:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc045:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc046:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc047:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc048:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc049:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc04f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc050:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc051:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc052:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc053:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc054:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc055:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc056:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc057:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc058:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc059:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc05f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc060:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc061:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc062:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc063:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc064:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc065:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc066:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc067:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc068:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc069:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc06f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc078:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc079:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc07f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc080:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc081:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc082:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc083:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc084:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc085:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc086:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc087:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc088:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc089:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc08f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc090:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc091:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc092:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc093:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc094:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc095:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc096:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc097:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc098:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc099:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc09f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0c9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ca:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0cb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0cc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0cd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ce:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0cf:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0d9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0da:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0db:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0dc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0dd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0de:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0df:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0e9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ea:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0eb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ec:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ed:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ee:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ef:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0f8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0f9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0fa:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0fb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0fc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0fd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0fe:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc0ff:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r4], #1	@ shift value
	@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1__:	@ "SHFT #u8"
	ldrb r2, [r4], #1
	add r3, r6, #0x2400	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPc100:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc101:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc102:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc103:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc104:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc105:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc106:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc107:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc108:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc109:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc10f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc110:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc111:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc112:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc113:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc114:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc115:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc116:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc117:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc118:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc119:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc11f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc120:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc121:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc122:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc123:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc124:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc125:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc126:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc127:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc128:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc129:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc12f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc138:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc139:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc13f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc140:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc141:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc142:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc143:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc144:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc145:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc146:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc147:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc148:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc149:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc14f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc150:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc151:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc152:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc153:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc154:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc155:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc156:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc157:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc158:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc159:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc15f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc160:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc161:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc162:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc163:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc164:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc165:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc166:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc167:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc168:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc169:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc16f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc178:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc179:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc17f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc180:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc181:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc182:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc183:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc184:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc185:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc186:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc187:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc188:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc189:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc18f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc190:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc191:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc192:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc193:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc194:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc195:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc196:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc197:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc198:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc199:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc19f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1c9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ca:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1cb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1cc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1cd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ce:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1cf:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1d9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1da:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1db:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1dc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1dd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1de:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1df:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e0:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e1:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e2:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e3:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e4:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e5:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e6:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e7:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1e9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ea:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1eb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ec:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ed:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ee:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ef:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1f8:
	ldrh r0, [r7, #0x00]	@ AW

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1f9:
	ldrh r0, [r7, #0x02]	@ CW

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1fa:
	ldrh r0, [r7, #0x04]	@ DW

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1fb:
	ldrh r0, [r7, #0x06]	@ BW

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1fc:
	ldrh r0, [r7, #0x08]	@ SP

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1fd:
	ldrh r0, [r7, #0x0a]	@ BP

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1fe:
	ldrh r0, [r7, #0x0c]	@ IX

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc1ff:
	ldrh r0, [r7, #0x0e]	@ IY

	ldrb r12, [r4], #1	@ shift value
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc3__:	@ "RET"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #10
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc4__:	@ "LES DW"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRMc4
	strh r0, [r7, r10]	@ Rw = [EA]
	add r0, r8, #2		@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x10]	@ DS1

	ldrb r3, [r4], #1
	subs r5, r5, #10
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRMc4:
	strh r0, [r7, r10]	@ Rw = [EA]
	add r0, r8, #2		@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x10]	@ DS1

	ldrb r3, [r4], #1
	subs r5, r5, #14
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc5__:	@ "LDS DW"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRMc5
	strh r0, [r7, r10]	@ Rw = [EA]
	add r0, r8, #2		@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x16]	@ DS0

	ldrb r3, [r4], #1
	subs r5, r5, #10
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRMc5:
	strh r0, [r7, r10]	@ Rw = [EA]
	add r0, r8, #2		@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x16]	@ DS0

	ldrb r3, [r4], #1
	subs r5, r5, #14
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc6__:	@ "MOV EA,#u8"
	ldrb r2, [r4], #1
	add r3, r6, #0x400	@ call getEAByte 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRMc6
	ldrb r2, [r4], #1
	strb r2, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRMc6:
	ldrb r1, [r4], #1
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPc7__:	@ "MOV EA,#u16"
	ldrb r2, [r4], #1
	add r3, r6, #0x800	@ call getEAWord 
	mov r11, pc
	ldr pc, [r3, r2, lsl#2]
	b jRMc7
	ldrb r2, [r4], #1
	ldrb r3, [r4], #1
	orr r2, r2, r3, lsl#8
	strh r2, [r7, r8]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

jRMc7:
	ldrb r2, [r4], #1
	ldrb r3, [r4], #1
	orr r1, r2, r3, lsl#8
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPcb__:	@ "RETF"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0		@ IP
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x12]	@ PS
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPcd__:	@ "INT #u8"
	ldrb r10, [r4], #1
	ldrh r1, [r7, #0x1A]	@ load NEC flag part
	orr r1, r1, r9			@ M____DIT __PASZCO
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldrh r1, [r7, #0x1A]
	bic r1, r1, #0x0300			@ clear IF and TF
	strh r1, [r7, #0x1A]
	mov r10, r10, lsl#2
	ldrh r1, [r7, #0x12]	@ load PS then PUSH
	mov r11, r1
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	add r1, r1, r11, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10				@ load int verctor ip
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0
	add r0, r10, #2			@ load int verctor ps
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	strh r0, [r7, #0x12]	@ PS
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #24
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPcf__:	@ "IRET"
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0			@ ip
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0			@ ps
	strh r0, [r7, #0x12]	@ PS
	@ POP r0
	ldrh r0, [r7, #0x08]	@ SP
	add r1, r0, #2
	strh r1, [r7, #0x08]	@ SP
	ldrh r1, [r7, #0x14]	@ SS
	add r0, r0, r1, lsl#4
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneh r0, [r2, r0]
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	and r9, r0, #0xff	@ flags
	and r0, r0, #0xff00
	strh r0, [r7,#0x1A]	@ nec flags
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #19
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0__:	@ "SHFTB #1"
	ldrb r2, [r4], #1
	add r3, r6, #0x2800	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPd000:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd001:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd002:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd003:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd004:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd005:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd006:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd007:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd008:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd009:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd00f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd010:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd011:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd012:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd013:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd014:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd015:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd016:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd017:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd018:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd019:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd01f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd020:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd021:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd022:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd023:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd024:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd025:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd026:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd027:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd028:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd029:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd02f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd038:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd039:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd03f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd040:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd041:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd042:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd043:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd044:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd045:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd046:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd047:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd048:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd049:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd04f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd050:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd051:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd052:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd053:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd054:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd055:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd056:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd057:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd058:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd059:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd05f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd060:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd061:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd062:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd063:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd064:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd065:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd066:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd067:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd068:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd069:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd06f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd078:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd079:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd07f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd080:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd081:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd082:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd083:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd084:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd085:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd086:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd087:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd088:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd089:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd08f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd090:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd091:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd092:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd093:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd094:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd095:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd096:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd097:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd098:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd099:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd09f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0c9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ca:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0cb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0cc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0cd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ce:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0cf:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0d9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0da:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0db:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0dc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0dd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0de:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0df:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0e9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ea:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0eb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ec:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ed:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ee:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ef:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0f8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0f9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0fa:
	ldrb r0, [r7, #0x04]	@ DL
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0fb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0fc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0fd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0fe:
	ldrb r0, [r7, #0x05]	@ DH
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd0ff:
	ldrb r0, [r7, #0x07]	@ BH
	mov r12, #1
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1__:	@ "SHFTW #1"
	ldrb r2, [r4], #1
	add r3, r6, #0x2c00	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPd100:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd101:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd102:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd103:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd104:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd105:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd106:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd107:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd108:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd109:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd10f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd110:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd111:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd112:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd113:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd114:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd115:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd116:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd117:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd118:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd119:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd11f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd120:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd121:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd122:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd123:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd124:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd125:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd126:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd127:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd128:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd129:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd12f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd138:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd139:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd13f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd140:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd141:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd142:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd143:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd144:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd145:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd146:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd147:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd148:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd149:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd14f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd150:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd151:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd152:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd153:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd154:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd155:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd156:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd157:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd158:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd159:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd15f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd160:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd161:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd162:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd163:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd164:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd165:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd166:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd167:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd168:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd169:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd16f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd178:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd179:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd17f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd180:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd181:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd182:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd183:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd184:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd185:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd186:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd187:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd188:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd189:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd18f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd190:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd191:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd192:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd193:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd194:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd195:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd196:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd197:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd198:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd199:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd19f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1c9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ca:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1cb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1cc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1cd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ce:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1cf:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1d9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1da:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1db:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1dc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1dd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1de:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1df:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1e9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ea:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1eb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ec:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ed:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ee:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ef:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1f8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1f9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1fa:
	ldrh r0, [r7, #0x04]	@ DW
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1fb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1fc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1fd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1fe:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd1ff:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r12, #1
	;@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2__:	@ "SHFTB CL"
	ldrb r2, [r4], #1
	add r3, r6, #0x3000	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPd200:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd201:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd202:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd203:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd204:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd205:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd206:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd207:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd208:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd209:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd20f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd210:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd211:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd212:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd213:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd214:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd215:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd216:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd217:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd218:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd219:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd21f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd220:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd221:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd222:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd223:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd224:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd225:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd226:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd227:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd228:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd229:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd22f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd238:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd239:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd23f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd240:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd241:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd242:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd243:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd244:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd245:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd246:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd247:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd248:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd249:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd24f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd250:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd251:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd252:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd253:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd254:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd255:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd256:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd257:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd258:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd259:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd25f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd260:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd261:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd262:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd263:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd264:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd265:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd266:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd267:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd268:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd269:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd26f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd278:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd279:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd27f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd280:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd281:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd282:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd283:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd284:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd285:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd286:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd287:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd288:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd289:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd28f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd290:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd291:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd292:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd293:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd294:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd295:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd296:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd297:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd298:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd299:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd29f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_BYTE
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#8
	and r9, r0, #0x100
	mov r9, r9, lsr#7	@ CF
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2c9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ca:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2cb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2cc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2cd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ce:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2cf:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_BYTE
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_BYTE
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#7
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#9
	and r9, r0, #0x100
	mov r9, r9, lsr#7
	mov r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2d9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2da:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2db:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2dc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2dd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2de:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2df:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_BYTE
	mov r3, r0, lsl#24
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#22
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#9
	and r9, r0, #0x00800000
	mov r9, r9, lsr#22

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_BYTE
	mov r0, r0, lsl#24
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2e9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ea:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2eb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ec:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ed:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ee:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ef:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_BYTE
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2f8:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2f9:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2fa:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2fb:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2fc:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2fd:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2fe:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd2ff:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHRA_BYTE
	mov r0, r0, lsl#24
	mov r0, r0, asr#24
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#24
	orr r9, r0, r3, lsr#28

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3__:	@ "SHFTW CL"
	ldrb r2, [r4], #1
	add r3, r6, #0x3400	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPd300:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd301:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd302:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd303:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd304:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd305:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd306:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd307:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd308:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd309:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd30f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd310:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd311:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd312:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd313:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd314:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd315:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd316:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd317:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd318:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd319:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd31f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd320:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd321:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd322:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd323:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd324:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd325:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd326:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd327:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd328:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd329:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd32f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd338:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd339:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd33f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd340:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd341:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd342:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd343:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd344:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd345:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd346:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd347:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd348:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd349:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd34f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd350:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd351:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd352:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd353:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd354:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd355:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd356:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd357:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd358:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd359:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd35f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd360:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd361:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd362:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd363:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd364:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd365:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd366:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd367:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd368:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd369:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd36f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd378:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd379:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd37f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd380:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd381:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd382:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd383:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd384:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd385:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd386:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd387:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd388:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd389:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd38f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd390:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd391:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd392:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd393:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd394:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd395:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd396:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd397:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd398:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd399:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd39f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c0:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c1:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c2:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c3:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c4:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c5:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c6:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c7:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROL_WORD
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#16
	and r9, r0, #0x10000
	mov r9, r9, lsr#15	@ CF
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c8:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3c9:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ca:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3cb:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3cc:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3cd:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ce:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3cf:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROR_WORD
	movs r0, r0, ror r12
	orr r0, r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d0:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d1:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d2:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d3:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d4:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d5:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d6:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d7:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ ROLC_WORD
	mov r3, r0
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#15
	mov r0, r0, lsl r12
	orr r0, r0, r0, lsr#17
	and r9, r0, #0x10000
	mov r9, r9, lsr#15
	mov r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d8:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3d9:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3da:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3db:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3dc:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3dd:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3de:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3df:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ RORC_WORD
	mov r3, r0, lsl#16
	and r2, r9, #2		@ CF
	orr r0, r3, r2, lsl#14
	mov r0, r0, lsr r12
	orr r0, r0, r0, lsl#17
	and r9, r0, #0x8000
	mov r9, r9, lsr#14

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e0:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e1:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e2:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e3:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e4:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e5:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e6:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e7:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHL_WORD
	mov r0, r0, lsl#16
	movs r0, r0, lsl r12
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e8:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3e9:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ea:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3eb:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ec:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ed:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ee:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ef:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	;@ SHR_WORD
	movs r0, r0, lsr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3f8:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3f9:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3fa:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3fb:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3fc:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3fd:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3fe:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPd3ff:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r12, [r7, #0x02]	@ CL
	@ SHRA_WORD
	mov r0, r0, lsl#16
	mov r0, r0, asr#16
	movs r0, r0, asr r12
	mrs r3, cpsr	@ NZC_
	mov r0, r0, lsl#16
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe2__:	@ "LOOP CW,#s8"
	ldrsb r3, [r4], #1
	ldrh r1, [r7, #0x02];@ CW
	subs r1, r1, #1
	strh r1, [r7, #0x02]
	beq e2loopend
	add r4, r4, r3		;@ PC += imm8

	ldrb r3, [r4], #1
	subs r5, r5, #6
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

e2loopend:

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe3__:	@ "JCXZ + #s8"
	ldrsb r11, [r4], #1
	ldrh r1, [r7, #0x02];@ CW
	cmp r1, #0
	addeq r4, r4, r11

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe4__:	@ "IN AL,#u8"
	ldrb r0, [r4], #1
	mov lr, pc
	ldr pc, [r7, #0x50]		;@ call "IN8"
	strb r0, [r7, #0x00]	;@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe5__:	@ "IN AW,#u8"
	ldrb r0, [r4]
	mov lr, pc
	ldr pc, [r7, #0x50]		;@ call "IN8" LO
	strb r0, [r7, #0x00]	;@ AL
	ldrb r0, [r4], #1
	add r0, r0, #1
	mov lr, pc
	ldr pc, [r7, #0x50]		;@ call "IN8" HI
	strb r0, [r7, #0x01]	;@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #5
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe6__:	@ "OUT AL,#u8"
	ldrb r0, [r4], #1
	ldrb r1, [r7, #0x00]	;@ AL
	mov lr, pc
	ldr pc, [r7, #0x54]		;@ call "OUT8"

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe7__:	@ "OUT AW,#u16"
	ldrb r0, [r4]
	ldrb r1, [r7, #0x00]	;@ AL
	mov lr, pc
	ldr pc, [r7, #0x54]		;@ call "OUT8" LO
	ldrb r0, [r4], #1
	add r0, r0, #1
	ldrb r1, [r7, #0x01]	;@ AH
	mov lr, pc
	ldr pc, [r7, #0x54]		;@ call "OUT8" HI

	ldrb r3, [r4], #1
	subs r5, r5, #3
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe8__:	@ "CALL + #s16"
	ldrb r1, [r4], #1
	ldrb r3, [r4], #1
	orr r10, r1, r3, lsl#8
	ldrh r1, [r7, #0x12]	@ load ps
	sub r4, r4, r1, lsl#4
	ldr r1, [r7, #0x2C]		@ membase
	sub r1, r4, r1			@ IP
	mov r11, r1, lsl#16
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	add r1, r11, r10, lsl#16
	mov r1, r1, lsr#16
	ldrh r0, [r7, #0x12]	;@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #24
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPe9__:	@ "JMP + #s16"
	ldrb r1, [r4], #1
	ldrb r3, [r4], #1
	mov r1, r1, lsl#16
	orr r1, r1, r3, lsl#24
	ldrh r0, [r7, #0x12]	@ load ps
	sub r4, r4, r0, lsl#4
	ldr r2, [r7, #0x2C]		@ membase
	sub r4, r4, r2			@ ip
	add r1, r1, r4, lsl#16
	mov r1, r1, lsr#16
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPea__:	@ "JMP #u16:#u16"
	ldrb r1, [r4], #1		@ IP
	ldrb r3, [r4], #1
	orr r1, r1, r3, lsl#8
	ldrb r0, [r4], #1		@ PS
	ldrb r2, [r4], #1
	orr r0, r0, r2, lsl#8
	strh r0, [r7, #0x12]	@ store PS

	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #27
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPeb__:	@ "JMP + #s8"
	ldrsb r1, [r4], #1
	add r4, r4, r1

	ldrb r3, [r4], #1
	subs r5, r5, #12
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf3__:	@ "REPT [?],CW"
	ldrb r2, [r4], #1
	add r3, r6, #0x3800	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPf3a4:
	sub r5, r5, #2
	;@ repeat i_movsb
	stmfd sp!,{r9}
	ldrh r10, [r7, #0x0c]	@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r11, r8				@ [DS0:IX] Source Address
	ldrh r10, [r7, #0x0e]	@ IY
	ldrh r8, [r7, #0x10]	@ DS1
	add r8, r10, r8, lsl#4
	mov r10, r8				@ [DS1:IY] Dest Address
	ldrh r3, [r7, #0x1A]	;@ flag
	tst r3, #0x0400			;@ check DF
	moveq r9, #1
	movne r9, #-1
	ldrh r8, [r7, #0x02]	;@ CW
lpf3a4:
	mov r0, r11
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	mov r0, r10
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]
	add r10, r10, r9
	add r11, r11, r9
	sub r5, r5, #6
	subs r8, r8, #1
	bgt lpf3a4
	ldrh r8, [r7, #0x02]	;@ CW
	ldrh r10, [r7, #0x0c]	;@ IX
	ldrh r11, [r7, #0x0e]	;@ IY
	ldrh r3, [r7, #0x1A]	;@ flag
	mov r0, #0
	tst r3, #0x0400			;@ check DF
	subne r8, r0, r8
	add r10, r10, r8
	add r11, r11, r8
	strh r0, [r7, #0x02]	;@ CW
	strh r10, [r7, #0x0c]	;@ IX
	strh r11, [r7, #0x0e]	;@ IY
	mov r8, #0
	ldmfd sp!,{r9}

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf3a5:
	sub r5, r5, #2
	;@ repeat i_movsw
	stmfd sp!,{r9}
	ldrh r10, [r7, #0x0c]	@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r11, r8				@ [DS0:IX] Source Address
	ldrh r10, [r7, #0x0e]	@ IY
	ldrh r8, [r7, #0x10]	@ DS1
	add r8, r10, r8, lsl#4
	mov r10, r8				@ [DS1:IY] Dest Address
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	moveq r9, #2
	movne r9, #-2
	ldrh r8, [r7, #0x02]	@ CW
lpf3a5:
	mov r0, r11
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	mov r0, r10
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	add r10, r10, r9
	add r11, r11, r9
	sub r5, r5, #10
	subs r8, r8, #1
	bgt lpf3a5
	ldrh r8, [r7, #0x02]	@ CW
	ldrh r10, [r7, #0x0c]	@ IX
	ldrh r11, [r7, #0x0e]	@ IY
	ldrh r3, [r7, #0x1A]	@ flag
	mov r0, #0
	tst r3, #0x0400			@ check DF
	subne r8, r0, r8
	add r10, r10, r8, lsl#1
	add r11, r11, r8, lsl#1
	strh r0, [r7, #0x02]	@ CW
	strh r10, [r7, #0x0c]	@ IX
	strh r11, [r7, #0x0e]	@ IY
	mov r8, #0
	ldmfd sp!,{r9}

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf3aa:
	sub r5, r5, #2
	;@ repeat i_stosw
	stmfd sp!,{r9}
	ldrh r9, [r7, #0x0e]	@ IY
	mov r9, r9, lsl#16
	mov r10, #0
	ldrh r8, [r7, #0x10]	@ DS1
	add r8, r10, r8, lsl#4
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	moveq r11, #1
	movne r11, #-1
	mov r11, r11, lsl#16
	ldrh r10, [r7, #0x02]	@ CW
lpf3aa:
	add r0, r8, r9, lsr#16
	ldrb r1, [r7, #0x00]	@ AL
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]
	add r9, r9, r11
	sub r5, r5, #3
	subs r10, r10, #1
	bgt lpf3aa
	strh r10, [r7, #0x02]	;@ CW
	mov r9, r9, lsr#16
	strh r9, [r7, #0x0e]	;@ IY
	ldmfd sp!,{r9}

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf3ab:
	sub r5, r5, #2
	;@ repeat i_stosw
	stmfd sp!,{r9}
	ldrh r9, [r7, #0x0e]	@ IY
	mov r9, r9, lsl#16
	mov r10, #0
	ldrh r8, [r7, #0x10]	@ DS1
	add r8, r10, r8, lsl#4
	ldrh r3, [r7, #0x1A]	@ flag
	tst r3, #0x0400			@ check DF
	moveq r11, #2
	movne r11, #-2
	mov r11, r11, lsl#16
	ldrh r10, [r7, #0x02]	@ CW
lpf3ab:
	add r0, r8, r9, lsr#16
	ldrh r1, [r7, #0x00]	@ AW
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	add r9, r9, r11
	sub r5, r5, #3
	subs r10, r10, #1
	bgt lpf3ab
	strh r10, [r7, #0x02]	;@ CW
	mov r9, r9, lsr#16
	strh r9, [r7, #0x0e]	;@ IY
	ldmfd sp!,{r9}

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6__:	@ "PRE 0xF6"
	ldrb r2, [r4], #1
	add r3, r6, #0x3c00	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPf600:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf601:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf602:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf603:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf604:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf605:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf606:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf607:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf610:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf611:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf612:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf613:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf614:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf615:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf616:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf617:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf618:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf619:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf61f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf620:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf621:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf622:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf623:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf624:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf625:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf626:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf627:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf628:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf629:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf62f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf630:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf631:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf632:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf633:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf634:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf635:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf636:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf637:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf638:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf639:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf63f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf640:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf641:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf642:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf643:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf644:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf645:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf646:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf647:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf650:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf651:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf652:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf653:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf654:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf655:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf656:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf657:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf658:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf659:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf65f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf660:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf661:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf662:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf663:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf664:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf665:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf666:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf667:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf668:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf669:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf66f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf670:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf671:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf672:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf673:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf674:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf675:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf676:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf677:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf678:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf679:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf67f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf680:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf681:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf682:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf683:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf684:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf685:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf686:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf687:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf690:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf691:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf692:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf693:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf694:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf695:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf696:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf697:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf698:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf699:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf69f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	b OP___2
OPf6b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c0:
	ldrb r0, [r7, #0x00]	@ AL
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c1:
	ldrb r0, [r7, #0x02]	@ CL
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c2:
	ldrb r0, [r7, #0x04]	@ DL
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c3:
	ldrb r0, [r7, #0x06]	@ BL
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c4:
	ldrb r0, [r7, #0x01]	@ AH
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c5:
	ldrb r0, [r7, #0x03]	@ CH
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c6:
	ldrb r0, [r7, #0x05]	@ DH
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6c7:
	ldrb r0, [r7, #0x07]	@ BH
	ldrb r1, [r4], #1
	mov r0, r0, lsl#24
	ands r0, r0, r1, lsl#24
	mrs r2, cpsr		@ NZCV
	orr r9, r0, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d0:
	ldrb r0, [r7, #0x00]	@ AL
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d1:
	ldrb r0, [r7, #0x02]	@ CL
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d2:
	ldrb r0, [r7, #0x04]	@ DL
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d3:
	ldrb r0, [r7, #0x06]	@ BL
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d4:
	ldrb r0, [r7, #0x01]	@ AH
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d5:
	ldrb r0, [r7, #0x03]	@ CH
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d6:
	ldrb r0, [r7, #0x05]	@ DH
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d7:
	ldrb r0, [r7, #0x07]	@ BH
	mvn r0, r0, lsl#24

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d8:
	ldrb r0, [r7, #0x00]	@ AL
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6d9:
	ldrb r0, [r7, #0x02]	@ CL
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6da:
	ldrb r0, [r7, #0x04]	@ DL
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6db:
	ldrb r0, [r7, #0x06]	@ BL
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6dc:
	ldrb r0, [r7, #0x01]	@ AH
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6dd:
	ldrb r0, [r7, #0x03]	@ CH
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6de:
	ldrb r0, [r7, #0x05]	@ DH
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6df:
	ldrb r0, [r7, #0x07]	@ BH
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#24
	mrs r3, cpsr	@ NZC_
	orr r9, r0, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6e0:
	ldrb r0, [r7, #0x00]	@ AL
	b OP___2
OPf6e1:
	ldrb r0, [r7, #0x02]	@ CL
	b OP___2
OPf6e2:
	ldrb r0, [r7, #0x04]	@ DL
	b OP___2
OPf6e3:
	ldrb r0, [r7, #0x06]	@ BL
	b OP___2
OPf6e4:
	ldrb r0, [r7, #0x01]	@ AH
	b OP___2
OPf6e5:
	ldrb r0, [r7, #0x03]	@ CH
	b OP___2
OPf6e6:
	ldrb r0, [r7, #0x05]	@ DH
	b OP___2
OPf6e7:
	ldrb r0, [r7, #0x07]	@ BH
	b OP___2
OPf6e8:
	ldrb r0, [r7, #0x00]	@ AL
	b OP___2
OPf6e9:
	ldrb r0, [r7, #0x02]	@ CL
	b OP___2
OPf6ea:
	ldrb r0, [r7, #0x04]	@ DL
	b OP___2
OPf6eb:
	ldrb r0, [r7, #0x06]	@ BL
	b OP___2
OPf6ec:
	ldrb r0, [r7, #0x01]	@ AH
	b OP___2
OPf6ed:
	ldrb r0, [r7, #0x03]	@ CH
	b OP___2
OPf6ee:
	ldrb r0, [r7, #0x05]	@ DH
	b OP___2
OPf6ef:
	ldrb r0, [r7, #0x07]	@ BH
	b OP___2
OPf6f0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_udiv
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6f9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6fa:
	ldrb r0, [r7, #0x04]	@ DL
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6fb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6fc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6fd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6fe:
	ldrb r0, [r7, #0x05]	@ DH
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf6ff:
	ldrb r0, [r7, #0x07]	@ BH
	mov r1, r0, lsl#24
	mov r1, r1, asr#24
	ldrsh r0, [r7, #0x00]	@ AW
	stmfd sp!,{r4,pc}
	b nec_div
	strb r0, [r7, #0x00]	@ AL
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7__:	@ "PRE 0xF7"
	ldrb r2, [r4], #1
	add r3, r6, #0x4000	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPf700:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf701:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf702:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf703:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf704:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf705:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf706:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf707:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf710:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf711:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf712:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf713:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf714:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf715:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf716:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf717:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf718:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf719:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf71f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf720:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf721:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf722:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf723:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf724:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf725:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf726:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf727:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf728:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf729:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf72f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf730:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf731:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf732:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf733:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf734:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf735:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf736:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf737:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf738:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf739:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf73f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf740:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf741:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf742:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf743:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf744:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf745:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf746:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf747:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf750:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf751:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf752:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf753:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf754:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf755:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf756:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf757:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf758:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf759:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf75f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf760:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf761:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf762:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf763:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf764:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf765:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf766:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf767:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf768:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf769:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf76f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf770:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf771:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf772:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf773:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf774:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf775:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf776:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf777:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf778:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf779:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf77f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf780:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf781:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf782:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf783:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf784:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf785:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf786:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf787:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #11
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf790:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf791:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf792:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf793:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf794:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf795:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf796:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf797:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf798:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf799:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf79f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7a9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7aa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7af:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #36
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7b9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ba:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7bb:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7bc:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7bd:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7be:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7bf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #53
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c0:
	ldrh r0, [r7, #0x00]	@ AW
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c1:
	ldrh r0, [r7, #0x02]	@ CW
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c2:
	ldrh r0, [r7, #0x04]	@ DW
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c3:
	ldrh r0, [r7, #0x06]	@ BW
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c4:
	ldrh r0, [r7, #0x08]	@ SP
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c5:
	ldrh r0, [r7, #0x0a]	@ BP
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c6:
	ldrh r0, [r7, #0x0c]	@ IX
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7c7:
	ldrh r0, [r7, #0x0e]	@ IY
	ldrb r1, [r4], #1
	ldrb r2, [r4], #1
	orr r1, r1, r2, lsl#8
	mov r0, r0, lsl#16
	ands r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d0:
	ldrh r0, [r7, #0x00]	@ AW
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d1:
	ldrh r0, [r7, #0x02]	@ CW
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d2:
	ldrh r0, [r7, #0x04]	@ DW
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d3:
	ldrh r0, [r7, #0x06]	@ BW
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d4:
	ldrh r0, [r7, #0x08]	@ SP
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d5:
	ldrh r0, [r7, #0x0a]	@ BP
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d6:
	ldrh r0, [r7, #0x0c]	@ IX
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d7:
	ldrh r0, [r7, #0x0e]	@ IY
	mvn r0, r0, lsl#16

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d8:
	ldrh r0, [r7, #0x00]	@ AW
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7d9:
	ldrh r0, [r7, #0x02]	@ CW
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7da:
	ldrh r0, [r7, #0x04]	@ DW
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7db:
	ldrh r0, [r7, #0x06]	@ BW
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7dc:
	ldrh r0, [r7, #0x08]	@ SP
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7dd:
	ldrh r0, [r7, #0x0a]	@ BP
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7de:
	ldrh r0, [r7, #0x0c]	@ IX
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7df:
	ldrh r0, [r7, #0x0e]	@ IY
	cmp r0, #0		@ CF into r11
	moveq r11, #0
	movne r11, #2
	rsb r0, r0, #0	@ r0=0-r0
	movs r0, r0, lsl#16
	mrs r3, cpsr	@ NZC_
	mov r9, r0, lsl#8
	orr r9, r9, r3, lsr#28
	bic r9, r9, #2	@ fix CF
	orr r9, r9, r11

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7e9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ea:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7eb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ec:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ed:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ee:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ef:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrsh r0, [r7, #0x00]	@ AW
	mul r2, r0, r1
	strh r2, [r7, #0x00]	@ AW
	mov r2, r2, lsr#16
	strh r2, [r7, #0x04]	@ DW
	cmp r2, #0
	moveq r9, #0
	movne r9, #3			@ CF and OF

	ldrb r3, [r4], #1
	subs r5, r5, #30
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_udiv
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7f9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7fa:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7fb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7fc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7fd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7fe:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf7ff:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0, lsl#16
	mov r1, r1, asr#16
	ldrh r0, [r7, #0x00]	@ AW
	ldrh r2, [r7, #0x04]	@ DW
	orr r0, r0, r2, lsl#16
	stmfd sp!,{r4,pc}
	b nec_div
	strh r0, [r7, #0x00]	@ AW
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #43
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf8__:	@ "CLC"
	bic r9, r9, #0x02			;@ clear CF

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPf9__:	@ "STC"
	orr r9, r9, #0x02			;@ set CF

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfa__:	@ "DI"
	ldrh r0, [r7, #0x1A]
	bic r0, r0, #0x0200			;@ Disable Interupt
	strh r0, [r7, #0x1A]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfb__:	@ "EI"
	ldrh r0, [r7, #0x1A]
	orr r0, r0, #0x0200		;@ Enable Interupt
	strh r0, [r7, #0x1A]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfc__:	@ "CLD"
	ldrh r0, [r7, #0x1A]
	bic r0, r0, #0x0400
	strh r0, [r7, #0x1A]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfd__:	@ "STD"
	ldrh r0, [r7, #0x1A]
	orr r0, r0, #0x0400
	strh r0, [r7, #0x1A]

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe__:	@ "PRE 0xFE"
	ldrb r2, [r4], #1
	add r3, r6, #0x4400	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPfe00:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe01:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe02:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe03:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe04:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe05:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe06:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe07:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe08:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe09:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe0f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe40:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe41:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe42:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe43:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe44:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe45:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe46:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe47:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe48:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe49:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe4f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe80:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe81:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe82:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe83:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe84:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe85:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe86:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe87:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe88:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe89:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfe8f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	ldrneb r0, [r2, r0]
	moveq lr, pc	@ call "read8"
	ldreq pc, [r7, #0x40]
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneb r1, [r2, r0]
	moveq lr, pc	@ call "write8"
	ldreq pc, [r7, #0x48]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec0:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec1:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec2:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec3:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec4:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec5:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec6:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec7:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r3, r0, lsl #24
	adds r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec8:
	ldrb r0, [r7, #0x00]	@ AL
	mov r8, #0x00
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x00]	@ AL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfec9:
	ldrb r0, [r7, #0x02]	@ CL
	mov r8, #0x02
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x02]	@ CL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfeca:
	ldrb r0, [r7, #0x04]	@ DL
	mov r8, #0x04
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x04]	@ DL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfecb:
	ldrb r0, [r7, #0x06]	@ BL
	mov r8, #0x06
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x06]	@ BL

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfecc:
	ldrb r0, [r7, #0x01]	@ AH
	mov r8, #0x01
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x01]	@ AH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfecd:
	ldrb r0, [r7, #0x03]	@ CH
	mov r8, #0x03
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x03]	@ CH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfece:
	ldrb r0, [r7, #0x05]	@ DH
	mov r8, #0x05
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x05]	@ DH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfecf:
	ldrb r0, [r7, #0x07]	@ BH
	mov r8, #0x07
	mov r3, r0, lsl #24
	subs r1, r3, #0x1000000
	mrs r3, cpsr				@ NZCV
	orr r9, r1, r3, lsr#28
	eor r3, r0, r1, lsr#24		@ AF
	and r3, r3, #0x10
	orr r9, r9, r3
	mov r1, r1, lsr#24
	strb r1, [r7, #0x07]	@ BH

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff__:	@ "PRE 0xFF"
	ldrb r2, [r4], #1
	add r3, r6, #0x4800	@ call EA
	ldr pc, [r3, r2, lsl#2]

OPff00:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff01:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff02:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff03:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff04:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff05:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff06:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff07:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff08:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff09:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff0f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff10:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff11:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff12:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff13:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff14:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff15:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff16:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff17:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff18:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff19:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff1f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff20:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff21:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff22:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff23:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff24:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff25:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff26:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff27:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff28:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff29:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2a:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2b:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2c:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2d:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2e:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff2f:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff30:
	@ EA = (BW + IX) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff31:
	@ EA = (BW + IY) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff32:
	@ EA = (BP + IX) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff33:
	@ EA = (BP + IY) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff34:
	@ EA = IX + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff35:
	@ EA = IY + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff36:
	@ EA = FETCH16 + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff37:
	@ EA = BW + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff40:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff41:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff42:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff43:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff44:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff45:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff46:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff47:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff48:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff49:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff4f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff50:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff51:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff52:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff53:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff54:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff55:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff56:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff57:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff58:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff59:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff5f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff60:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff61:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff62:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff63:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff64:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff65:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff66:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff67:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff68:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff69:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6a:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6b:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6c:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6d:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6e:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff6f:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff70:
	@ EA = (BW + IX + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff71:
	@ EA = (BW + IY + FETCH8S) + DefaultBase(DS0)
	ldrh r2, [r7, #0x06]		@ BW
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff72:
	@ EA = (BP + IX + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0c]		@ IX
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff73:
	@ EA = (BP + IY + FETCH8S) + DefaultBase(SS)
	ldrh r2, [r7, #0x0a]		@ BP
	ldrh r10, [r7, #0x0e]		@ IY
	mov r2, r2, lsl#16
	add r10, r2, r10, lsl#16
	ldrsb r2, [r4], #1
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff74:
	@ EA = (IX + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0c]		@ IX
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff75:
	@ EA = (IY + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x0e]		@ IY
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff76:
	@ EA = (BP + FETCH8S) + DefaultBase(SS)
	ldrh r10, [r7, #0x0a]		@ BP
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff77:
	@ EA = (BW + FETCH8S) + DefaultBase(DS0)
	ldrh r10, [r7, #0x06]		@ BW
	ldrsb r2, [r4], #1
	mov r10, r10, lsl#16
	add r10, r10, r2, lsl#16
	mov r10, r10, lsr#16
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff80:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff81:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff82:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff83:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff84:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff85:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff86:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff87:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff88:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff89:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff8f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	mov r0, r8
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	strneb r1, [r2], #1
	movne r1, r1, lsr#8
	strneb r1, [r2]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #7
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff90:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff91:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff92:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff93:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff94:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff95:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff96:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff97:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #20
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff98:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff99:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9a:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9b:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9c:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9d:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9e:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPff9f:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #26
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa8:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffa9:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffaa:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffab:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffac:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffad:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffae:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffaf:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb0:
	@ EA = (FETCH16S + BW + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb1:
	@ EA = (FETCH16S + BW + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb2:
	@ EA = (FETCH16S + BP + IX) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb3:
	@ EA = (FETCH16S + BP + IY) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x30000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb4:
	@ EA = (FETCH16S + IX) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0c]		@ IX
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb5:
	@ EA = (FETCH16S + IY) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0e]		@ IY
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb6:
	@ EA = (FETCH16S + BP) + DefaultBase(SS)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl#8
	ldrh r2, [r7, #0x0a]		@ BP
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x14]		@ SS
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffb7:
	@ EA = (FETCH16S + BW) + DefaultBase(DS0)
	ldrb r2, [r4], #1
	ldrb r10, [r4], #1
	orr r10, r2, r10, lsl #8
	ldrh r2, [r7, #0x06]		@ BW
	add r10, r10, r2
	bic r10, r10, #0x10000
	tst r8, #0x80000000
	ldreqh r8, [r7, #0x16]		@ DS0
	add r8, r10, r8, lsl#4
	mov r0, r8
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	adds r0, r0, r1, lsl#16
	mrs r2, cpsr		@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x00]	@ AW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffc9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x02]	@ CW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffca:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x04]	@ DW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffcb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x06]	@ BW

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffcc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x08]	@ SP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffcd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0a]	@ BP

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffce:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0c]	@ IX

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffcf:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, #1
	eor r3, r0, r1
	mov r0, r0, lsl#16
	subs r0, r0, r1, lsl#16
	mrs r2, cpsr			@ NZCV
	mov r9, r0, lsl#8
	orr r9, r9, r2, lsr#28
	eor r9, r9, #2			@ !CF
	eor r3, r3, r0, lsr#16	@ AF
	and r3, r3, #0x10
	orr r9, r9, r3

	mov r1, r0, lsr #16
	strh r1, [r7, #0x0e]	@ IY

	ldrb r3, [r4], #1
	subs r5, r5, #2
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r11, r0				@ new ip
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r10, [r7, #0x12]	@ PS
	add r1, r1, r10, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffd9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffda:
	ldrh r0, [r7, #0x04]	@ DW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffdb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffdc:
	ldrh r0, [r7, #0x08]	@ SP
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffdd:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffde:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffdf:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r11, r0				@ new ip
	add r0, r8, #2			@ next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r10, r0				@ new ps
	ldrh r1, [r7, #0x12]	@ PS
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	ldr r1, [r7, #0x2C]		@ mem_base
	ldrh r2, [r7, #0x12]	@ PS
	add r1, r1, r2, lsl#4
	sub r1, r4, r1			@ calc current IP then PUSH
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]
	strh r10, [r7, #0x12]	@ store new ps
	mov r0, r10
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #16
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0				@ new ip
	ldrh r0, [r7, #0x12]	@ load ps
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #13
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe8:
	ldrh r0, [r7, #0x00]	@ AW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffe9:
	ldrh r0, [r7, #0x02]	@ CW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffea:
	ldrh r0, [r7, #0x04]	@ DW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffeb:
	ldrh r0, [r7, #0x06]	@ BW
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffec:
	ldrh r0, [r7, #0x08]	@ SP
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffed:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffee:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPffef:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r11, r0				@ new ip
	add r0, r8, #2			@ new ps in next EA
	ldr r2, [r7, #0x38]		@ ppMemRead
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	addne r2, r2, r0
	ldrneb r0, [r2], #1
	ldrneb r3, [r2]
	orrne r0, r0, r3, lsl#8
	moveq lr, pc	@ call "read16"
	ldreq pc, [r7, #0x44]
	mov r1, r11
	ldr r2, [r7, #0x2C]	@ membase
	add r2, r2, r0, lsl#4
	add r4, r2, r1

	ldrb r3, [r4], #1
	subs r5, r5, #15
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff0:
	ldrh r0, [r7, #0x00]	@ AW
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff1:
	ldrh r0, [r7, #0x02]	@ CW
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff2:
	ldrh r0, [r7, #0x04]	@ DW
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff3:
	ldrh r0, [r7, #0x06]	@ BW
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff4:
	ldrh r0, [r7, #0x08]	@ SP
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff5:
	ldrh r0, [r7, #0x0a]	@ BP
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff6:
	ldrh r0, [r7, #0x0c]	@ IX
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd

OPfff7:
	ldrh r0, [r7, #0x0e]	@ IY
	mov r1, r0
	@ PUSH r1
	ldrh r0, [r7, #0x08]	@ SP
	sub r0, r0, #2
	strh r0, [r7, #0x08]	@ SP
	mov r0, r0, lsl#16
	mov r0, r0, lsr#16
	ldrh r2, [r7, #0x14]	@ SS
	add r0, r0, r2, lsl#4
	ldr r2, [r7, #0x3C]		@ ppMemWrite
	mov r3, r0, lsr#11
	ldr r2, [r2, r3, lsl#2]
	cmp r2, #0
	strneh r1, [r2, r0]
	moveq lr, pc	@ call "write16"
	ldreq pc, [r7, #0x4C]

	ldrb r3, [r4], #1
	subs r5, r5, #4
	ldrge pc, [r6, r3, asl#2]
	b ArmNecEnd



@ --- JumpTable ----------------------------------

	.data
	.align 4

ArmV33CryptTable:
	.long JumpTables
	.long JumpTables+0x00003800
	.long 0

DecToHexEx:	@ 0~511 to 0x00~0xf9
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15
	.byte 0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31
	.byte 0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47
	.byte 0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63
	.byte 0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79
	.byte 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95
	.byte 0x96,0x97,0x98,0x99,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11
	.byte 0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27
	.byte 0x28,0x29,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43
	.byte 0x44,0x45,0x46,0x47,0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59
	.byte 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75
	.byte 0x76,0x77,0x78,0x79,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91
	.byte 0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07
	.byte 0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23
	.byte 0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
	.byte 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55
	.byte 0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71
	.byte 0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87
	.byte 0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x00,0x01,0x02,0x03
	.byte 0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19
	.byte 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32,0x33,0x34,0x35
	.byte 0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x50,0x51
	.byte 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67
	.byte 0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x80,0x81,0x82,0x83
	.byte 0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15
	.byte 0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31
	.byte 0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47
	.byte 0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63
	.byte 0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79
	.byte 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95
	.byte 0x96,0x97,0x98,0x99,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11

DecToHex:
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15
	.byte 0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31
	.byte 0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47
	.byte 0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63
	.byte 0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79
	.byte 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95
	.byte 0x96,0x97,0x98,0x99,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xb0,0xb1
	.byte 0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7
	.byte 0xc8,0xc9,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xe0,0xe1,0xe2,0xe3
	.byte 0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15
	.byte 0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31
	.byte 0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47
	.byte 0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x60,0x61,0x62,0x63
	.byte 0x64,0x65,0x66,0x67,0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79
	.byte 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95

HexToDec:
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	.byte 0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19
	.byte 0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23
	.byte 0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d
	.byte 0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
	.byte 0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41
	.byte 0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b
	.byte 0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55
	.byte 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f
	.byte 0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69
	.byte 0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73
	.byte 0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d
	.byte 0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87
	.byte 0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91
	.byte 0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b
	.byte 0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5

JumpTables:
	.long OP00__,OP01__,OP02__,OP03__,OP04__,OP05__,OP06__,OP07__	@ 0000
	.long OP08__,OP09__,OP0a__,OP0b__,OP0c__,OP0d__,OP0e__,OP0f__	@ 0008
	.long OP10__,OP11__,OP12__,OP13__,OP14__,OP15__,OP16__,OP17__	@ 0010
	.long OP18__,OP19__,OP1a__,OP1b__,OP1c__,OP1d__,OP1e__,OP1f__	@ 0018
	.long OP20__,OP21__,OP22__,OP23__,OP24__,OP25__,OP26__,OP27__	@ 0020
	.long OP28__,OP29__,OP2a__,OP2b__,OP2c__,OP2d__,OP2e__,OP2f__	@ 0028
	.long OP30__,OP31__,OP32__,OP33__,OP34__,OP35__,OP36__,OP37__	@ 0030
	.long OP38__,OP39__,OP3a__,OP3b__,OP3c__,OP3d__,OP3e__,OP3f__	@ 0038
	.long OP40__,OP41__,OP42__,OP43__,OP44__,OP45__,OP46__,OP47__	@ 0040
	.long OP48__,OP49__,OP4a__,OP4b__,OP4c__,OP4d__,OP4e__,OP4f__	@ 0048
	.long OP50__,OP51__,OP52__,OP53__,OP54__,OP55__,OP56__,OP57__	@ 0050
	.long OP58__,OP59__,OP5a__,OP5b__,OP5c__,OP5d__,OP5e__,OP5f__	@ 0058
	.long OP60__,OP61__,OP____,OP____,OP____,OP____,OP____,OP____	@ 0060
	.long OP____,OP____,OP____,OP6b__,OP____,OP____,OP____,OP____	@ 0068
	.long OP70__,OP71__,OP72__,OP73__,OP74__,OP75__,OP76__,OP77__	@ 0070
	.long OP78__,OP79__,OP____,OP____,OP7c__,OP7d__,OP7e__,OP7f__	@ 0078
	.long OP80__,OP81__,OP____,OP83__,OP84__,OP85__,OP86__,OP87__	@ 0080
	.long OP88__,OP89__,OP8a__,OP8b__,OP8c__,OP8d__,OP8e__,OP8f__	@ 0088
	.long OP90__,OP91__,OP92__,OP93__,OP94__,OP95__,OP96__,OP97__	@ 0090
	.long OP98__,OP99__,OP9a__,OP____,OP9c__,OP9d__,OP____,OP____	@ 0098
	.long OPa0__,OPa1__,OPa2__,OPa3__,OP____,OP____,OP____,OP____	@ 00a0
	.long OPa8__,OPa9__,OPaa__,OPab__,OPac__,OPad__,OP____,OP____	@ 00a8
	.long OPb0__,OPb1__,OPb2__,OPb3__,OPb4__,OPb5__,OPb6__,OPb7__	@ 00b0
	.long OPb8__,OPb9__,OPba__,OPbb__,OPbc__,OPbd__,OPbe__,OPbf__	@ 00b8
	.long OPc0__,OPc1__,OP____,OPc3__,OPc4__,OPc5__,OPc6__,OPc7__	@ 00c0
	.long OP____,OP____,OP____,OPcb__,OP____,OPcd__,OP____,OPcf__	@ 00c8
	.long OPd0__,OPd1__,OPd2__,OPd3__,OP____,OP____,OP____,OP____	@ 00d0
	.long OP____,OP____,OP____,OP____,OP____,OP____,OP____,OP____	@ 00d8
	.long OP____,OP____,OPe2__,OPe3__,OPe4__,OPe5__,OPe6__,OPe7__	@ 00e0
	.long OPe8__,OPe9__,OPea__,OPeb__,OP____,OP____,OP____,OP____	@ 00e8
	.long OP____,OP____,OP____,OPf3__,OP____,OP____,OPf6__,OPf7__	@ 00f0
	.long OPf8__,OPf9__,OPfa__,OPfb__,OPfc__,OPfd__,OPfe__,OPff__	@ 00f8

	@ EA BYTE
	.long eab_00,eab_01,eab_02,eab_03,eab_04,eab_05,eab_06,eab_07	@ 0100
	.long eab_08,eab_09,eab_0a,eab_0b,eab_0c,eab_0d,eab_0e,eab_0f	@ 0108
	.long eab_10,eab_11,eab_12,eab_13,eab_14,eab_15,eab_16,eab_17	@ 0110
	.long eab_18,eab_19,eab_1a,eab_1b,eab_1c,eab_1d,eab_1e,eab_1f	@ 0118
	.long eab_20,eab_21,eab_22,eab_23,eab_24,eab_25,eab_26,eab_27	@ 0120
	.long eab_28,eab_29,eab_2a,eab_2b,eab_2c,eab_2d,eab_2e,eab_2f	@ 0128
	.long eab_30,eab_31,eab_32,eab_33,eab_34,eab_35,eab_36,eab_37	@ 0130
	.long eab_38,eab_39,eab_3a,eab_3b,eab_3c,eab_3d,eab_3e,eab_3f	@ 0138
	.long eab_40,eab_41,eab_42,eab_43,eab_44,eab_45,eab_46,eab_47	@ 0140
	.long eab_48,eab_49,eab_4a,eab_4b,eab_4c,eab_4d,eab_4e,eab_4f	@ 0148
	.long eab_50,eab_51,eab_52,eab_53,eab_54,eab_55,eab_56,eab_57	@ 0150
	.long eab_58,eab_59,eab_5a,eab_5b,eab_5c,eab_5d,eab_5e,eab_5f	@ 0158
	.long eab_60,eab_61,eab_62,eab_63,eab_64,eab_65,eab_66,eab_67	@ 0160
	.long eab_68,eab_69,eab_6a,eab_6b,eab_6c,eab_6d,eab_6e,eab_6f	@ 0168
	.long eab_70,eab_71,eab_72,eab_73,eab_74,eab_75,eab_76,eab_77	@ 0170
	.long eab_78,eab_79,eab_7a,eab_7b,eab_7c,eab_7d,eab_7e,eab_7f	@ 0178
	.long eab_80,eab_81,eab_82,eab_83,eab_84,eab_85,eab_86,eab_87	@ 0180
	.long eab_88,eab_89,eab_8a,eab_8b,eab_8c,eab_8d,eab_8e,eab_8f	@ 0188
	.long eab_90,eab_91,eab_92,eab_93,eab_94,eab_95,eab_96,eab_97	@ 0190
	.long eab_98,eab_99,eab_9a,eab_9b,eab_9c,eab_9d,eab_9e,eab_9f	@ 0198
	.long eab_a0,eab_a1,eab_a2,eab_a3,eab_a4,eab_a5,eab_a6,eab_a7	@ 01a0
	.long eab_a8,eab_a9,eab_aa,eab_ab,eab_ac,eab_ad,eab_ae,eab_af	@ 01a8
	.long eab_b0,eab_b1,eab_b2,eab_b3,eab_b4,eab_b5,eab_b6,eab_b7	@ 01b0
	.long eab_b8,eab_b9,eab_ba,eab_bb,eab_bc,eab_bd,eab_be,eab_bf	@ 01b8
	.long eab_c0,eab_c1,eab_c2,eab_c3,eab_c4,eab_c5,eab_c6,eab_c7	@ 01c0
	.long eab_c8,eab_c9,eab_ca,eab_cb,eab_cc,eab_cd,eab_ce,eab_cf	@ 01c8
	.long eab_d0,eab_d1,eab_d2,eab_d3,eab_d4,eab_d5,eab_d6,eab_d7	@ 01d0
	.long eab_d8,eab_d9,eab_da,eab_db,eab_dc,eab_dd,eab_de,eab_df	@ 01d8
	.long eab_e0,eab_e1,eab_e2,eab_e3,eab_e4,eab_e5,eab_e6,eab_e7	@ 01e0
	.long eab_e8,eab_e9,eab_ea,eab_eb,eab_ec,eab_ed,eab_ee,eab_ef	@ 01e8
	.long eab_f0,eab_f1,eab_f2,eab_f3,eab_f4,eab_f5,eab_f6,eab_f7	@ 01f0
	.long eab_f8,eab_f9,eab_fa,eab_fb,eab_fc,eab_fd,eab_fe,eab_ff	@ 01f8

	@ EA WORD
	.long eaw_00,eaw_01,eaw_02,eaw_03,eaw_04,eaw_05,eaw_06,eaw_07	@ 0200
	.long eaw_08,eaw_09,eaw_0a,eaw_0b,eaw_0c,eaw_0d,eaw_0e,eaw_0f	@ 0208
	.long eaw_10,eaw_11,eaw_12,eaw_13,eaw_14,eaw_15,eaw_16,eaw_17	@ 0210
	.long eaw_18,eaw_19,eaw_1a,eaw_1b,eaw_1c,eaw_1d,eaw_1e,eaw_1f	@ 0218
	.long eaw_20,eaw_21,eaw_22,eaw_23,eaw_24,eaw_25,eaw_26,eaw_27	@ 0220
	.long eaw_28,eaw_29,eaw_2a,eaw_2b,eaw_2c,eaw_2d,eaw_2e,eaw_2f	@ 0228
	.long eaw_30,eaw_31,eaw_32,eaw_33,eaw_34,eaw_35,eaw_36,eaw_37	@ 0230
	.long eaw_38,eaw_39,eaw_3a,eaw_3b,eaw_3c,eaw_3d,eaw_3e,eaw_3f	@ 0238
	.long eaw_40,eaw_41,eaw_42,eaw_43,eaw_44,eaw_45,eaw_46,eaw_47	@ 0240
	.long eaw_48,eaw_49,eaw_4a,eaw_4b,eaw_4c,eaw_4d,eaw_4e,eaw_4f	@ 0248
	.long eaw_50,eaw_51,eaw_52,eaw_53,eaw_54,eaw_55,eaw_56,eaw_57	@ 0250
	.long eaw_58,eaw_59,eaw_5a,eaw_5b,eaw_5c,eaw_5d,eaw_5e,eaw_5f	@ 0258
	.long eaw_60,eaw_61,eaw_62,eaw_63,eaw_64,eaw_65,eaw_66,eaw_67	@ 0260
	.long eaw_68,eaw_69,eaw_6a,eaw_6b,eaw_6c,eaw_6d,eaw_6e,eaw_6f	@ 0268
	.long eaw_70,eaw_71,eaw_72,eaw_73,eaw_74,eaw_75,eaw_76,eaw_77	@ 0270
	.long eaw_78,eaw_79,eaw_7a,eaw_7b,eaw_7c,eaw_7d,eaw_7e,eaw_7f	@ 0278
	.long eaw_80,eaw_81,eaw_82,eaw_83,eaw_84,eaw_85,eaw_86,eaw_87	@ 0280
	.long eaw_88,eaw_89,eaw_8a,eaw_8b,eaw_8c,eaw_8d,eaw_8e,eaw_8f	@ 0288
	.long eaw_90,eaw_91,eaw_92,eaw_93,eaw_94,eaw_95,eaw_96,eaw_97	@ 0290
	.long eaw_98,eaw_99,eaw_9a,eaw_9b,eaw_9c,eaw_9d,eaw_9e,eaw_9f	@ 0298
	.long eaw_a0,eaw_a1,eaw_a2,eaw_a3,eaw_a4,eaw_a5,eaw_a6,eaw_a7	@ 02a0
	.long eaw_a8,eaw_a9,eaw_aa,eaw_ab,eaw_ac,eaw_ad,eaw_ae,eaw_af	@ 02a8
	.long eaw_b0,eaw_b1,eaw_b2,eaw_b3,eaw_b4,eaw_b5,eaw_b6,eaw_b7	@ 02b0
	.long eaw_b8,eaw_b9,eaw_ba,eaw_bb,eaw_bc,eaw_bd,eaw_be,eaw_bf	@ 02b8
	.long eaw_c0,eaw_c1,eaw_c2,eaw_c3,eaw_c4,eaw_c5,eaw_c6,eaw_c7	@ 02c0
	.long eaw_c8,eaw_c9,eaw_ca,eaw_cb,eaw_cc,eaw_cd,eaw_ce,eaw_cf	@ 02c8
	.long eaw_d0,eaw_d1,eaw_d2,eaw_d3,eaw_d4,eaw_d5,eaw_d6,eaw_d7	@ 02d0
	.long eaw_d8,eaw_d9,eaw_da,eaw_db,eaw_dc,eaw_dd,eaw_de,eaw_df	@ 02d8
	.long eaw_e0,eaw_e1,eaw_e2,eaw_e3,eaw_e4,eaw_e5,eaw_e6,eaw_e7	@ 02e0
	.long eaw_e8,eaw_e9,eaw_ea,eaw_eb,eaw_ec,eaw_ed,eaw_ee,eaw_ef	@ 02e8
	.long eaw_f0,eaw_f1,eaw_f2,eaw_f3,eaw_f4,eaw_f5,eaw_f6,eaw_f7	@ 02f0
	.long eaw_f8,eaw_f9,eaw_fa,eaw_fb,eaw_fc,eaw_fd,eaw_fe,eaw_ff	@ 02f8

	@ "PRE 0x0F" sub funcs
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0300
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0308
	.long OP0f10,OP0f11,OP0f12,OP0f13,OP0f14,OP0f15,OP0f16,OP0f17	@ 0310
	.long OP0f18,OP0f19,OP0f1a,OP0f1b,OP0f1c,OP0f1d,OP0f1e,OP0f1f	@ 0318
	.long OP0f20,OP___2,OP0f22,OP___2,OP___2,OP___2,OP0f26,OP___2	@ 0320
	.long OP0f28,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0328
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0330
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0338
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0340
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0348
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0350
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0358
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0360
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0368
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0370
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0378
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0380
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0388
	.long OP___2,OP___2,OP0f92,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0390
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0398
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03a0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03a8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03b0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03b8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03c0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03c8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03d0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03d8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03e0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03e8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03f0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 03f8

	@ "PRE 0x80" sub funcs
	.long OP8000,OP8001,OP8002,OP8003,OP8004,OP8005,OP8006,OP8007	@ 0400
	.long OP8008,OP8009,OP800a,OP800b,OP800c,OP800d,OP800e,OP800f	@ 0408
	.long OP8010,OP8011,OP8012,OP8013,OP8014,OP8015,OP8016,OP8017	@ 0410
	.long OP8018,OP8019,OP801a,OP801b,OP801c,OP801d,OP801e,OP801f	@ 0418
	.long OP8020,OP8021,OP8022,OP8023,OP8024,OP8025,OP8026,OP8027	@ 0420
	.long OP8028,OP8029,OP802a,OP802b,OP802c,OP802d,OP802e,OP802f	@ 0428
	.long OP8030,OP8031,OP8032,OP8033,OP8034,OP8035,OP8036,OP8037	@ 0430
	.long OP8038,OP8039,OP803a,OP803b,OP803c,OP803d,OP803e,OP803f	@ 0438
	.long OP8040,OP8041,OP8042,OP8043,OP8044,OP8045,OP8046,OP8047	@ 0440
	.long OP8048,OP8049,OP804a,OP804b,OP804c,OP804d,OP804e,OP804f	@ 0448
	.long OP8050,OP8051,OP8052,OP8053,OP8054,OP8055,OP8056,OP8057	@ 0450
	.long OP8058,OP8059,OP805a,OP805b,OP805c,OP805d,OP805e,OP805f	@ 0458
	.long OP8060,OP8061,OP8062,OP8063,OP8064,OP8065,OP8066,OP8067	@ 0460
	.long OP8068,OP8069,OP806a,OP806b,OP806c,OP806d,OP806e,OP806f	@ 0468
	.long OP8070,OP8071,OP8072,OP8073,OP8074,OP8075,OP8076,OP8077	@ 0470
	.long OP8078,OP8079,OP807a,OP807b,OP807c,OP807d,OP807e,OP807f	@ 0478
	.long OP8080,OP8081,OP8082,OP8083,OP8084,OP8085,OP8086,OP8087	@ 0480
	.long OP8088,OP8089,OP808a,OP808b,OP808c,OP808d,OP808e,OP808f	@ 0488
	.long OP8090,OP8091,OP8092,OP8093,OP8094,OP8095,OP8096,OP8097	@ 0490
	.long OP8098,OP8099,OP809a,OP809b,OP809c,OP809d,OP809e,OP809f	@ 0498
	.long OP80a0,OP80a1,OP80a2,OP80a3,OP80a4,OP80a5,OP80a6,OP80a7	@ 04a0
	.long OP80a8,OP80a9,OP80aa,OP80ab,OP80ac,OP80ad,OP80ae,OP80af	@ 04a8
	.long OP80b0,OP80b1,OP80b2,OP80b3,OP80b4,OP80b5,OP80b6,OP80b7	@ 04b0
	.long OP80b8,OP80b9,OP80ba,OP80bb,OP80bc,OP80bd,OP80be,OP80bf	@ 04b8
	.long OP80c0,OP80c1,OP80c2,OP80c3,OP80c4,OP80c5,OP80c6,OP80c7	@ 04c0
	.long OP80c8,OP80c9,OP80ca,OP80cb,OP80cc,OP80cd,OP80ce,OP80cf	@ 04c8
	.long OP80d0,OP80d1,OP80d2,OP80d3,OP80d4,OP80d5,OP80d6,OP80d7	@ 04d0
	.long OP80d8,OP80d9,OP80da,OP80db,OP80dc,OP80dd,OP80de,OP80df	@ 04d8
	.long OP80e0,OP80e1,OP80e2,OP80e3,OP80e4,OP80e5,OP80e6,OP80e7	@ 04e0
	.long OP80e8,OP80e9,OP80ea,OP80eb,OP80ec,OP80ed,OP80ee,OP80ef	@ 04e8
	.long OP80f0,OP80f1,OP80f2,OP80f3,OP80f4,OP80f5,OP80f6,OP80f7	@ 04f0
	.long OP80f8,OP80f9,OP80fa,OP80fb,OP80fc,OP80fd,OP80fe,OP80ff	@ 04f8

	@ "PRE 0x81" sub funcs
	.long OP8100,OP8101,OP8102,OP8103,OP8104,OP8105,OP8106,OP8107	@ 0500
	.long OP8108,OP8109,OP810a,OP810b,OP810c,OP810d,OP810e,OP810f	@ 0508
	.long OP8110,OP8111,OP8112,OP8113,OP8114,OP8115,OP8116,OP8117	@ 0510
	.long OP8118,OP8119,OP811a,OP811b,OP811c,OP811d,OP811e,OP811f	@ 0518
	.long OP8120,OP8121,OP8122,OP8123,OP8124,OP8125,OP8126,OP8127	@ 0520
	.long OP8128,OP8129,OP812a,OP812b,OP812c,OP812d,OP812e,OP812f	@ 0528
	.long OP8130,OP8131,OP8132,OP8133,OP8134,OP8135,OP8136,OP8137	@ 0530
	.long OP8138,OP8139,OP813a,OP813b,OP813c,OP813d,OP813e,OP813f	@ 0538
	.long OP8140,OP8141,OP8142,OP8143,OP8144,OP8145,OP8146,OP8147	@ 0540
	.long OP8148,OP8149,OP814a,OP814b,OP814c,OP814d,OP814e,OP814f	@ 0548
	.long OP8150,OP8151,OP8152,OP8153,OP8154,OP8155,OP8156,OP8157	@ 0550
	.long OP8158,OP8159,OP815a,OP815b,OP815c,OP815d,OP815e,OP815f	@ 0558
	.long OP8160,OP8161,OP8162,OP8163,OP8164,OP8165,OP8166,OP8167	@ 0560
	.long OP8168,OP8169,OP816a,OP816b,OP816c,OP816d,OP816e,OP816f	@ 0568
	.long OP8170,OP8171,OP8172,OP8173,OP8174,OP8175,OP8176,OP8177	@ 0570
	.long OP8178,OP8179,OP817a,OP817b,OP817c,OP817d,OP817e,OP817f	@ 0578
	.long OP8180,OP8181,OP8182,OP8183,OP8184,OP8185,OP8186,OP8187	@ 0580
	.long OP8188,OP8189,OP818a,OP818b,OP818c,OP818d,OP818e,OP818f	@ 0588
	.long OP8190,OP8191,OP8192,OP8193,OP8194,OP8195,OP8196,OP8197	@ 0590
	.long OP8198,OP8199,OP819a,OP819b,OP819c,OP819d,OP819e,OP819f	@ 0598
	.long OP81a0,OP81a1,OP81a2,OP81a3,OP81a4,OP81a5,OP81a6,OP81a7	@ 05a0
	.long OP81a8,OP81a9,OP81aa,OP81ab,OP81ac,OP81ad,OP81ae,OP81af	@ 05a8
	.long OP81b0,OP81b1,OP81b2,OP81b3,OP81b4,OP81b5,OP81b6,OP81b7	@ 05b0
	.long OP81b8,OP81b9,OP81ba,OP81bb,OP81bc,OP81bd,OP81be,OP81bf	@ 05b8
	.long OP81c0,OP81c1,OP81c2,OP81c3,OP81c4,OP81c5,OP81c6,OP81c7	@ 05c0
	.long OP81c8,OP81c9,OP81ca,OP81cb,OP81cc,OP81cd,OP81ce,OP81cf	@ 05c8
	.long OP81d0,OP81d1,OP81d2,OP81d3,OP81d4,OP81d5,OP81d6,OP81d7	@ 05d0
	.long OP81d8,OP81d9,OP81da,OP81db,OP81dc,OP81dd,OP81de,OP81df	@ 05d8
	.long OP81e0,OP81e1,OP81e2,OP81e3,OP81e4,OP81e5,OP81e6,OP81e7	@ 05e0
	.long OP81e8,OP81e9,OP81ea,OP81eb,OP81ec,OP81ed,OP81ee,OP81ef	@ 05e8
	.long OP81f0,OP81f1,OP81f2,OP81f3,OP81f4,OP81f5,OP81f6,OP81f7	@ 05f0
	.long OP81f8,OP81f9,OP81fa,OP81fb,OP81fc,OP81fd,OP81fe,OP81ff	@ 05f8

	@ "PRE 0x83" sub funcs
	.long OP8300,OP8301,OP8302,OP8303,OP8304,OP8305,OP8306,OP8307	@ 0600
	.long OP8308,OP8309,OP830a,OP830b,OP830c,OP830d,OP830e,OP830f	@ 0608
	.long OP8310,OP8311,OP8312,OP8313,OP8314,OP8315,OP8316,OP8317	@ 0610
	.long OP8318,OP8319,OP831a,OP831b,OP831c,OP831d,OP831e,OP831f	@ 0618
	.long OP8320,OP8321,OP8322,OP8323,OP8324,OP8325,OP8326,OP8327	@ 0620
	.long OP8328,OP8329,OP832a,OP832b,OP832c,OP832d,OP832e,OP832f	@ 0628
	.long OP8330,OP8331,OP8332,OP8333,OP8334,OP8335,OP8336,OP8337	@ 0630
	.long OP8338,OP8339,OP833a,OP833b,OP833c,OP833d,OP833e,OP833f	@ 0638
	.long OP8340,OP8341,OP8342,OP8343,OP8344,OP8345,OP8346,OP8347	@ 0640
	.long OP8348,OP8349,OP834a,OP834b,OP834c,OP834d,OP834e,OP834f	@ 0648
	.long OP8350,OP8351,OP8352,OP8353,OP8354,OP8355,OP8356,OP8357	@ 0650
	.long OP8358,OP8359,OP835a,OP835b,OP835c,OP835d,OP835e,OP835f	@ 0658
	.long OP8360,OP8361,OP8362,OP8363,OP8364,OP8365,OP8366,OP8367	@ 0660
	.long OP8368,OP8369,OP836a,OP836b,OP836c,OP836d,OP836e,OP836f	@ 0668
	.long OP8370,OP8371,OP8372,OP8373,OP8374,OP8375,OP8376,OP8377	@ 0670
	.long OP8378,OP8379,OP837a,OP837b,OP837c,OP837d,OP837e,OP837f	@ 0678
	.long OP8380,OP8381,OP8382,OP8383,OP8384,OP8385,OP8386,OP8387	@ 0680
	.long OP8388,OP8389,OP838a,OP838b,OP838c,OP838d,OP838e,OP838f	@ 0688
	.long OP8390,OP8391,OP8392,OP8393,OP8394,OP8395,OP8396,OP8397	@ 0690
	.long OP8398,OP8399,OP839a,OP839b,OP839c,OP839d,OP839e,OP839f	@ 0698
	.long OP83a0,OP83a1,OP83a2,OP83a3,OP83a4,OP83a5,OP83a6,OP83a7	@ 06a0
	.long OP83a8,OP83a9,OP83aa,OP83ab,OP83ac,OP83ad,OP83ae,OP83af	@ 06a8
	.long OP83b0,OP83b1,OP83b2,OP83b3,OP83b4,OP83b5,OP83b6,OP83b7	@ 06b0
	.long OP83b8,OP83b9,OP83ba,OP83bb,OP83bc,OP83bd,OP83be,OP83bf	@ 06b8
	.long OP83c0,OP83c1,OP83c2,OP83c3,OP83c4,OP83c5,OP83c6,OP83c7	@ 06c0
	.long OP83c8,OP83c9,OP83ca,OP83cb,OP83cc,OP83cd,OP83ce,OP83cf	@ 06c8
	.long OP83d0,OP83d1,OP83d2,OP83d3,OP83d4,OP83d5,OP83d6,OP83d7	@ 06d0
	.long OP83d8,OP83d9,OP83da,OP83db,OP83dc,OP83dd,OP83de,OP83df	@ 06d8
	.long OP83e0,OP83e1,OP83e2,OP83e3,OP83e4,OP83e5,OP83e6,OP83e7	@ 06e0
	.long OP83e8,OP83e9,OP83ea,OP83eb,OP83ec,OP83ed,OP83ee,OP83ef	@ 06e8
	.long OP83f0,OP83f1,OP83f2,OP83f3,OP83f4,OP83f5,OP83f6,OP83f7	@ 06f0
	.long OP83f8,OP83f9,OP83fa,OP83fb,OP83fc,OP83fd,OP83fe,OP83ff	@ 06f8

	@ "LEA Rw" sub funcs
	.long OP8d00,OP8d01,OP8d02,OP8d03,OP8d04,OP8d05,OP8d06,OP8d07	@ 0700
	.long OP8d08,OP8d09,OP8d0a,OP8d0b,OP8d0c,OP8d0d,OP8d0e,OP8d0f	@ 0708
	.long OP8d10,OP8d11,OP8d12,OP8d13,OP8d14,OP8d15,OP8d16,OP8d17	@ 0710
	.long OP8d18,OP8d19,OP8d1a,OP8d1b,OP8d1c,OP8d1d,OP8d1e,OP8d1f	@ 0718
	.long OP8d20,OP8d21,OP8d22,OP8d23,OP8d24,OP8d25,OP8d26,OP8d27	@ 0720
	.long OP8d28,OP8d29,OP8d2a,OP8d2b,OP8d2c,OP8d2d,OP8d2e,OP8d2f	@ 0728
	.long OP8d30,OP8d31,OP8d32,OP8d33,OP8d34,OP8d35,OP8d36,OP8d37	@ 0730
	.long OP8d38,OP8d39,OP8d3a,OP8d3b,OP8d3c,OP8d3d,OP8d3e,OP8d3f	@ 0738
	.long OP8d40,OP8d41,OP8d42,OP8d43,OP8d44,OP8d45,OP8d46,OP8d47	@ 0740
	.long OP8d48,OP8d49,OP8d4a,OP8d4b,OP8d4c,OP8d4d,OP8d4e,OP8d4f	@ 0748
	.long OP8d50,OP8d51,OP8d52,OP8d53,OP8d54,OP8d55,OP8d56,OP8d57	@ 0750
	.long OP8d58,OP8d59,OP8d5a,OP8d5b,OP8d5c,OP8d5d,OP8d5e,OP8d5f	@ 0758
	.long OP8d60,OP8d61,OP8d62,OP8d63,OP8d64,OP8d65,OP8d66,OP8d67	@ 0760
	.long OP8d68,OP8d69,OP8d6a,OP8d6b,OP8d6c,OP8d6d,OP8d6e,OP8d6f	@ 0768
	.long OP8d70,OP8d71,OP8d72,OP8d73,OP8d74,OP8d75,OP8d76,OP8d77	@ 0770
	.long OP8d78,OP8d79,OP8d7a,OP8d7b,OP8d7c,OP8d7d,OP8d7e,OP8d7f	@ 0778
	.long OP8d80,OP8d81,OP8d82,OP8d83,OP8d84,OP8d85,OP8d86,OP8d87	@ 0780
	.long OP8d88,OP8d89,OP8d8a,OP8d8b,OP8d8c,OP8d8d,OP8d8e,OP8d8f	@ 0788
	.long OP8d90,OP8d91,OP8d92,OP8d93,OP8d94,OP8d95,OP8d96,OP8d97	@ 0790
	.long OP8d98,OP8d99,OP8d9a,OP8d9b,OP8d9c,OP8d9d,OP8d9e,OP8d9f	@ 0798
	.long OP8da0,OP8da1,OP8da2,OP8da3,OP8da4,OP8da5,OP8da6,OP8da7	@ 07a0
	.long OP8da8,OP8da9,OP8daa,OP8dab,OP8dac,OP8dad,OP8dae,OP8daf	@ 07a8
	.long OP8db0,OP8db1,OP8db2,OP8db3,OP8db4,OP8db5,OP8db6,OP8db7	@ 07b0
	.long OP8db8,OP8db9,OP8dba,OP8dbb,OP8dbc,OP8dbd,OP8dbe,OP8dbf	@ 07b8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07c0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07c8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07d0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07d8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07e0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07e8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07f0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 07f8

	@ "SHFT #u8" sub funcs
	.long OPc000,OPc001,OPc002,OPc003,OPc004,OPc005,OPc006,OPc007	@ 0800
	.long OPc008,OPc009,OPc00a,OPc00b,OPc00c,OPc00d,OPc00e,OPc00f	@ 0808
	.long OPc010,OPc011,OPc012,OPc013,OPc014,OPc015,OPc016,OPc017	@ 0810
	.long OPc018,OPc019,OPc01a,OPc01b,OPc01c,OPc01d,OPc01e,OPc01f	@ 0818
	.long OPc020,OPc021,OPc022,OPc023,OPc024,OPc025,OPc026,OPc027	@ 0820
	.long OPc028,OPc029,OPc02a,OPc02b,OPc02c,OPc02d,OPc02e,OPc02f	@ 0828
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0830
	.long OPc038,OPc039,OPc03a,OPc03b,OPc03c,OPc03d,OPc03e,OPc03f	@ 0838
	.long OPc040,OPc041,OPc042,OPc043,OPc044,OPc045,OPc046,OPc047	@ 0840
	.long OPc048,OPc049,OPc04a,OPc04b,OPc04c,OPc04d,OPc04e,OPc04f	@ 0848
	.long OPc050,OPc051,OPc052,OPc053,OPc054,OPc055,OPc056,OPc057	@ 0850
	.long OPc058,OPc059,OPc05a,OPc05b,OPc05c,OPc05d,OPc05e,OPc05f	@ 0858
	.long OPc060,OPc061,OPc062,OPc063,OPc064,OPc065,OPc066,OPc067	@ 0860
	.long OPc068,OPc069,OPc06a,OPc06b,OPc06c,OPc06d,OPc06e,OPc06f	@ 0868
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0870
	.long OPc078,OPc079,OPc07a,OPc07b,OPc07c,OPc07d,OPc07e,OPc07f	@ 0878
	.long OPc080,OPc081,OPc082,OPc083,OPc084,OPc085,OPc086,OPc087	@ 0880
	.long OPc088,OPc089,OPc08a,OPc08b,OPc08c,OPc08d,OPc08e,OPc08f	@ 0888
	.long OPc090,OPc091,OPc092,OPc093,OPc094,OPc095,OPc096,OPc097	@ 0890
	.long OPc098,OPc099,OPc09a,OPc09b,OPc09c,OPc09d,OPc09e,OPc09f	@ 0898
	.long OPc0a0,OPc0a1,OPc0a2,OPc0a3,OPc0a4,OPc0a5,OPc0a6,OPc0a7	@ 08a0
	.long OPc0a8,OPc0a9,OPc0aa,OPc0ab,OPc0ac,OPc0ad,OPc0ae,OPc0af	@ 08a8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 08b0
	.long OPc0b8,OPc0b9,OPc0ba,OPc0bb,OPc0bc,OPc0bd,OPc0be,OPc0bf	@ 08b8
	.long OPc0c0,OPc0c1,OPc0c2,OPc0c3,OPc0c4,OPc0c5,OPc0c6,OPc0c7	@ 08c0
	.long OPc0c8,OPc0c9,OPc0ca,OPc0cb,OPc0cc,OPc0cd,OPc0ce,OPc0cf	@ 08c8
	.long OPc0d0,OPc0d1,OPc0d2,OPc0d3,OPc0d4,OPc0d5,OPc0d6,OPc0d7	@ 08d0
	.long OPc0d8,OPc0d9,OPc0da,OPc0db,OPc0dc,OPc0dd,OPc0de,OPc0df	@ 08d8
	.long OPc0e0,OPc0e1,OPc0e2,OPc0e3,OPc0e4,OPc0e5,OPc0e6,OPc0e7	@ 08e0
	.long OPc0e8,OPc0e9,OPc0ea,OPc0eb,OPc0ec,OPc0ed,OPc0ee,OPc0ef	@ 08e8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 08f0
	.long OPc0f8,OPc0f9,OPc0fa,OPc0fb,OPc0fc,OPc0fd,OPc0fe,OPc0ff	@ 08f8

	@ "SHFT #u8" sub funcs
	.long OPc100,OPc101,OPc102,OPc103,OPc104,OPc105,OPc106,OPc107	@ 0900
	.long OPc108,OPc109,OPc10a,OPc10b,OPc10c,OPc10d,OPc10e,OPc10f	@ 0908
	.long OPc110,OPc111,OPc112,OPc113,OPc114,OPc115,OPc116,OPc117	@ 0910
	.long OPc118,OPc119,OPc11a,OPc11b,OPc11c,OPc11d,OPc11e,OPc11f	@ 0918
	.long OPc120,OPc121,OPc122,OPc123,OPc124,OPc125,OPc126,OPc127	@ 0920
	.long OPc128,OPc129,OPc12a,OPc12b,OPc12c,OPc12d,OPc12e,OPc12f	@ 0928
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0930
	.long OPc138,OPc139,OPc13a,OPc13b,OPc13c,OPc13d,OPc13e,OPc13f	@ 0938
	.long OPc140,OPc141,OPc142,OPc143,OPc144,OPc145,OPc146,OPc147	@ 0940
	.long OPc148,OPc149,OPc14a,OPc14b,OPc14c,OPc14d,OPc14e,OPc14f	@ 0948
	.long OPc150,OPc151,OPc152,OPc153,OPc154,OPc155,OPc156,OPc157	@ 0950
	.long OPc158,OPc159,OPc15a,OPc15b,OPc15c,OPc15d,OPc15e,OPc15f	@ 0958
	.long OPc160,OPc161,OPc162,OPc163,OPc164,OPc165,OPc166,OPc167	@ 0960
	.long OPc168,OPc169,OPc16a,OPc16b,OPc16c,OPc16d,OPc16e,OPc16f	@ 0968
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0970
	.long OPc178,OPc179,OPc17a,OPc17b,OPc17c,OPc17d,OPc17e,OPc17f	@ 0978
	.long OPc180,OPc181,OPc182,OPc183,OPc184,OPc185,OPc186,OPc187	@ 0980
	.long OPc188,OPc189,OPc18a,OPc18b,OPc18c,OPc18d,OPc18e,OPc18f	@ 0988
	.long OPc190,OPc191,OPc192,OPc193,OPc194,OPc195,OPc196,OPc197	@ 0990
	.long OPc198,OPc199,OPc19a,OPc19b,OPc19c,OPc19d,OPc19e,OPc19f	@ 0998
	.long OPc1a0,OPc1a1,OPc1a2,OPc1a3,OPc1a4,OPc1a5,OPc1a6,OPc1a7	@ 09a0
	.long OPc1a8,OPc1a9,OPc1aa,OPc1ab,OPc1ac,OPc1ad,OPc1ae,OPc1af	@ 09a8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 09b0
	.long OPc1b8,OPc1b9,OPc1ba,OPc1bb,OPc1bc,OPc1bd,OPc1be,OPc1bf	@ 09b8
	.long OPc1c0,OPc1c1,OPc1c2,OPc1c3,OPc1c4,OPc1c5,OPc1c6,OPc1c7	@ 09c0
	.long OPc1c8,OPc1c9,OPc1ca,OPc1cb,OPc1cc,OPc1cd,OPc1ce,OPc1cf	@ 09c8
	.long OPc1d0,OPc1d1,OPc1d2,OPc1d3,OPc1d4,OPc1d5,OPc1d6,OPc1d7	@ 09d0
	.long OPc1d8,OPc1d9,OPc1da,OPc1db,OPc1dc,OPc1dd,OPc1de,OPc1df	@ 09d8
	.long OPc1e0,OPc1e1,OPc1e2,OPc1e3,OPc1e4,OPc1e5,OPc1e6,OPc1e7	@ 09e0
	.long OPc1e8,OPc1e9,OPc1ea,OPc1eb,OPc1ec,OPc1ed,OPc1ee,OPc1ef	@ 09e8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 09f0
	.long OPc1f8,OPc1f9,OPc1fa,OPc1fb,OPc1fc,OPc1fd,OPc1fe,OPc1ff	@ 09f8

	@ "SHFTB #1" sub funcs
	.long OPd000,OPd001,OPd002,OPd003,OPd004,OPd005,OPd006,OPd007	@ 0a00
	.long OPd008,OPd009,OPd00a,OPd00b,OPd00c,OPd00d,OPd00e,OPd00f	@ 0a08
	.long OPd010,OPd011,OPd012,OPd013,OPd014,OPd015,OPd016,OPd017	@ 0a10
	.long OPd018,OPd019,OPd01a,OPd01b,OPd01c,OPd01d,OPd01e,OPd01f	@ 0a18
	.long OPd020,OPd021,OPd022,OPd023,OPd024,OPd025,OPd026,OPd027	@ 0a20
	.long OPd028,OPd029,OPd02a,OPd02b,OPd02c,OPd02d,OPd02e,OPd02f	@ 0a28
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0a30
	.long OPd038,OPd039,OPd03a,OPd03b,OPd03c,OPd03d,OPd03e,OPd03f	@ 0a38
	.long OPd040,OPd041,OPd042,OPd043,OPd044,OPd045,OPd046,OPd047	@ 0a40
	.long OPd048,OPd049,OPd04a,OPd04b,OPd04c,OPd04d,OPd04e,OPd04f	@ 0a48
	.long OPd050,OPd051,OPd052,OPd053,OPd054,OPd055,OPd056,OPd057	@ 0a50
	.long OPd058,OPd059,OPd05a,OPd05b,OPd05c,OPd05d,OPd05e,OPd05f	@ 0a58
	.long OPd060,OPd061,OPd062,OPd063,OPd064,OPd065,OPd066,OPd067	@ 0a60
	.long OPd068,OPd069,OPd06a,OPd06b,OPd06c,OPd06d,OPd06e,OPd06f	@ 0a68
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0a70
	.long OPd078,OPd079,OPd07a,OPd07b,OPd07c,OPd07d,OPd07e,OPd07f	@ 0a78
	.long OPd080,OPd081,OPd082,OPd083,OPd084,OPd085,OPd086,OPd087	@ 0a80
	.long OPd088,OPd089,OPd08a,OPd08b,OPd08c,OPd08d,OPd08e,OPd08f	@ 0a88
	.long OPd090,OPd091,OPd092,OPd093,OPd094,OPd095,OPd096,OPd097	@ 0a90
	.long OPd098,OPd099,OPd09a,OPd09b,OPd09c,OPd09d,OPd09e,OPd09f	@ 0a98
	.long OPd0a0,OPd0a1,OPd0a2,OPd0a3,OPd0a4,OPd0a5,OPd0a6,OPd0a7	@ 0aa0
	.long OPd0a8,OPd0a9,OPd0aa,OPd0ab,OPd0ac,OPd0ad,OPd0ae,OPd0af	@ 0aa8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ab0
	.long OPd0b8,OPd0b9,OPd0ba,OPd0bb,OPd0bc,OPd0bd,OPd0be,OPd0bf	@ 0ab8
	.long OPd0c0,OPd0c1,OPd0c2,OPd0c3,OPd0c4,OPd0c5,OPd0c6,OPd0c7	@ 0ac0
	.long OPd0c8,OPd0c9,OPd0ca,OPd0cb,OPd0cc,OPd0cd,OPd0ce,OPd0cf	@ 0ac8
	.long OPd0d0,OPd0d1,OPd0d2,OPd0d3,OPd0d4,OPd0d5,OPd0d6,OPd0d7	@ 0ad0
	.long OPd0d8,OPd0d9,OPd0da,OPd0db,OPd0dc,OPd0dd,OPd0de,OPd0df	@ 0ad8
	.long OPd0e0,OPd0e1,OPd0e2,OPd0e3,OPd0e4,OPd0e5,OPd0e6,OPd0e7	@ 0ae0
	.long OPd0e8,OPd0e9,OPd0ea,OPd0eb,OPd0ec,OPd0ed,OPd0ee,OPd0ef	@ 0ae8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0af0
	.long OPd0f8,OPd0f9,OPd0fa,OPd0fb,OPd0fc,OPd0fd,OPd0fe,OPd0ff	@ 0af8

	@ "SHFTW #1" sub funcs
	.long OPd100,OPd101,OPd102,OPd103,OPd104,OPd105,OPd106,OPd107	@ 0b00
	.long OPd108,OPd109,OPd10a,OPd10b,OPd10c,OPd10d,OPd10e,OPd10f	@ 0b08
	.long OPd110,OPd111,OPd112,OPd113,OPd114,OPd115,OPd116,OPd117	@ 0b10
	.long OPd118,OPd119,OPd11a,OPd11b,OPd11c,OPd11d,OPd11e,OPd11f	@ 0b18
	.long OPd120,OPd121,OPd122,OPd123,OPd124,OPd125,OPd126,OPd127	@ 0b20
	.long OPd128,OPd129,OPd12a,OPd12b,OPd12c,OPd12d,OPd12e,OPd12f	@ 0b28
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0b30
	.long OPd138,OPd139,OPd13a,OPd13b,OPd13c,OPd13d,OPd13e,OPd13f	@ 0b38
	.long OPd140,OPd141,OPd142,OPd143,OPd144,OPd145,OPd146,OPd147	@ 0b40
	.long OPd148,OPd149,OPd14a,OPd14b,OPd14c,OPd14d,OPd14e,OPd14f	@ 0b48
	.long OPd150,OPd151,OPd152,OPd153,OPd154,OPd155,OPd156,OPd157	@ 0b50
	.long OPd158,OPd159,OPd15a,OPd15b,OPd15c,OPd15d,OPd15e,OPd15f	@ 0b58
	.long OPd160,OPd161,OPd162,OPd163,OPd164,OPd165,OPd166,OPd167	@ 0b60
	.long OPd168,OPd169,OPd16a,OPd16b,OPd16c,OPd16d,OPd16e,OPd16f	@ 0b68
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0b70
	.long OPd178,OPd179,OPd17a,OPd17b,OPd17c,OPd17d,OPd17e,OPd17f	@ 0b78
	.long OPd180,OPd181,OPd182,OPd183,OPd184,OPd185,OPd186,OPd187	@ 0b80
	.long OPd188,OPd189,OPd18a,OPd18b,OPd18c,OPd18d,OPd18e,OPd18f	@ 0b88
	.long OPd190,OPd191,OPd192,OPd193,OPd194,OPd195,OPd196,OPd197	@ 0b90
	.long OPd198,OPd199,OPd19a,OPd19b,OPd19c,OPd19d,OPd19e,OPd19f	@ 0b98
	.long OPd1a0,OPd1a1,OPd1a2,OPd1a3,OPd1a4,OPd1a5,OPd1a6,OPd1a7	@ 0ba0
	.long OPd1a8,OPd1a9,OPd1aa,OPd1ab,OPd1ac,OPd1ad,OPd1ae,OPd1af	@ 0ba8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0bb0
	.long OPd1b8,OPd1b9,OPd1ba,OPd1bb,OPd1bc,OPd1bd,OPd1be,OPd1bf	@ 0bb8
	.long OPd1c0,OPd1c1,OPd1c2,OPd1c3,OPd1c4,OPd1c5,OPd1c6,OPd1c7	@ 0bc0
	.long OPd1c8,OPd1c9,OPd1ca,OPd1cb,OPd1cc,OPd1cd,OPd1ce,OPd1cf	@ 0bc8
	.long OPd1d0,OPd1d1,OPd1d2,OPd1d3,OPd1d4,OPd1d5,OPd1d6,OPd1d7	@ 0bd0
	.long OPd1d8,OPd1d9,OPd1da,OPd1db,OPd1dc,OPd1dd,OPd1de,OPd1df	@ 0bd8
	.long OPd1e0,OPd1e1,OPd1e2,OPd1e3,OPd1e4,OPd1e5,OPd1e6,OPd1e7	@ 0be0
	.long OPd1e8,OPd1e9,OPd1ea,OPd1eb,OPd1ec,OPd1ed,OPd1ee,OPd1ef	@ 0be8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0bf0
	.long OPd1f8,OPd1f9,OPd1fa,OPd1fb,OPd1fc,OPd1fd,OPd1fe,OPd1ff	@ 0bf8

	@ "SHFTB CL" sub funcs
	.long OPd200,OPd201,OPd202,OPd203,OPd204,OPd205,OPd206,OPd207	@ 0c00
	.long OPd208,OPd209,OPd20a,OPd20b,OPd20c,OPd20d,OPd20e,OPd20f	@ 0c08
	.long OPd210,OPd211,OPd212,OPd213,OPd214,OPd215,OPd216,OPd217	@ 0c10
	.long OPd218,OPd219,OPd21a,OPd21b,OPd21c,OPd21d,OPd21e,OPd21f	@ 0c18
	.long OPd220,OPd221,OPd222,OPd223,OPd224,OPd225,OPd226,OPd227	@ 0c20
	.long OPd228,OPd229,OPd22a,OPd22b,OPd22c,OPd22d,OPd22e,OPd22f	@ 0c28
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0c30
	.long OPd238,OPd239,OPd23a,OPd23b,OPd23c,OPd23d,OPd23e,OPd23f	@ 0c38
	.long OPd240,OPd241,OPd242,OPd243,OPd244,OPd245,OPd246,OPd247	@ 0c40
	.long OPd248,OPd249,OPd24a,OPd24b,OPd24c,OPd24d,OPd24e,OPd24f	@ 0c48
	.long OPd250,OPd251,OPd252,OPd253,OPd254,OPd255,OPd256,OPd257	@ 0c50
	.long OPd258,OPd259,OPd25a,OPd25b,OPd25c,OPd25d,OPd25e,OPd25f	@ 0c58
	.long OPd260,OPd261,OPd262,OPd263,OPd264,OPd265,OPd266,OPd267	@ 0c60
	.long OPd268,OPd269,OPd26a,OPd26b,OPd26c,OPd26d,OPd26e,OPd26f	@ 0c68
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0c70
	.long OPd278,OPd279,OPd27a,OPd27b,OPd27c,OPd27d,OPd27e,OPd27f	@ 0c78
	.long OPd280,OPd281,OPd282,OPd283,OPd284,OPd285,OPd286,OPd287	@ 0c80
	.long OPd288,OPd289,OPd28a,OPd28b,OPd28c,OPd28d,OPd28e,OPd28f	@ 0c88
	.long OPd290,OPd291,OPd292,OPd293,OPd294,OPd295,OPd296,OPd297	@ 0c90
	.long OPd298,OPd299,OPd29a,OPd29b,OPd29c,OPd29d,OPd29e,OPd29f	@ 0c98
	.long OPd2a0,OPd2a1,OPd2a2,OPd2a3,OPd2a4,OPd2a5,OPd2a6,OPd2a7	@ 0ca0
	.long OPd2a8,OPd2a9,OPd2aa,OPd2ab,OPd2ac,OPd2ad,OPd2ae,OPd2af	@ 0ca8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0cb0
	.long OPd2b8,OPd2b9,OPd2ba,OPd2bb,OPd2bc,OPd2bd,OPd2be,OPd2bf	@ 0cb8
	.long OPd2c0,OPd2c1,OPd2c2,OPd2c3,OPd2c4,OPd2c5,OPd2c6,OPd2c7	@ 0cc0
	.long OPd2c8,OPd2c9,OPd2ca,OPd2cb,OPd2cc,OPd2cd,OPd2ce,OPd2cf	@ 0cc8
	.long OPd2d0,OPd2d1,OPd2d2,OPd2d3,OPd2d4,OPd2d5,OPd2d6,OPd2d7	@ 0cd0
	.long OPd2d8,OPd2d9,OPd2da,OPd2db,OPd2dc,OPd2dd,OPd2de,OPd2df	@ 0cd8
	.long OPd2e0,OPd2e1,OPd2e2,OPd2e3,OPd2e4,OPd2e5,OPd2e6,OPd2e7	@ 0ce0
	.long OPd2e8,OPd2e9,OPd2ea,OPd2eb,OPd2ec,OPd2ed,OPd2ee,OPd2ef	@ 0ce8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0cf0
	.long OPd2f8,OPd2f9,OPd2fa,OPd2fb,OPd2fc,OPd2fd,OPd2fe,OPd2ff	@ 0cf8

	@ "SHFTW CL" sub funcs
	.long OPd300,OPd301,OPd302,OPd303,OPd304,OPd305,OPd306,OPd307	@ 0d00
	.long OPd308,OPd309,OPd30a,OPd30b,OPd30c,OPd30d,OPd30e,OPd30f	@ 0d08
	.long OPd310,OPd311,OPd312,OPd313,OPd314,OPd315,OPd316,OPd317	@ 0d10
	.long OPd318,OPd319,OPd31a,OPd31b,OPd31c,OPd31d,OPd31e,OPd31f	@ 0d18
	.long OPd320,OPd321,OPd322,OPd323,OPd324,OPd325,OPd326,OPd327	@ 0d20
	.long OPd328,OPd329,OPd32a,OPd32b,OPd32c,OPd32d,OPd32e,OPd32f	@ 0d28
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0d30
	.long OPd338,OPd339,OPd33a,OPd33b,OPd33c,OPd33d,OPd33e,OPd33f	@ 0d38
	.long OPd340,OPd341,OPd342,OPd343,OPd344,OPd345,OPd346,OPd347	@ 0d40
	.long OPd348,OPd349,OPd34a,OPd34b,OPd34c,OPd34d,OPd34e,OPd34f	@ 0d48
	.long OPd350,OPd351,OPd352,OPd353,OPd354,OPd355,OPd356,OPd357	@ 0d50
	.long OPd358,OPd359,OPd35a,OPd35b,OPd35c,OPd35d,OPd35e,OPd35f	@ 0d58
	.long OPd360,OPd361,OPd362,OPd363,OPd364,OPd365,OPd366,OPd367	@ 0d60
	.long OPd368,OPd369,OPd36a,OPd36b,OPd36c,OPd36d,OPd36e,OPd36f	@ 0d68
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0d70
	.long OPd378,OPd379,OPd37a,OPd37b,OPd37c,OPd37d,OPd37e,OPd37f	@ 0d78
	.long OPd380,OPd381,OPd382,OPd383,OPd384,OPd385,OPd386,OPd387	@ 0d80
	.long OPd388,OPd389,OPd38a,OPd38b,OPd38c,OPd38d,OPd38e,OPd38f	@ 0d88
	.long OPd390,OPd391,OPd392,OPd393,OPd394,OPd395,OPd396,OPd397	@ 0d90
	.long OPd398,OPd399,OPd39a,OPd39b,OPd39c,OPd39d,OPd39e,OPd39f	@ 0d98
	.long OPd3a0,OPd3a1,OPd3a2,OPd3a3,OPd3a4,OPd3a5,OPd3a6,OPd3a7	@ 0da0
	.long OPd3a8,OPd3a9,OPd3aa,OPd3ab,OPd3ac,OPd3ad,OPd3ae,OPd3af	@ 0da8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0db0
	.long OPd3b8,OPd3b9,OPd3ba,OPd3bb,OPd3bc,OPd3bd,OPd3be,OPd3bf	@ 0db8
	.long OPd3c0,OPd3c1,OPd3c2,OPd3c3,OPd3c4,OPd3c5,OPd3c6,OPd3c7	@ 0dc0
	.long OPd3c8,OPd3c9,OPd3ca,OPd3cb,OPd3cc,OPd3cd,OPd3ce,OPd3cf	@ 0dc8
	.long OPd3d0,OPd3d1,OPd3d2,OPd3d3,OPd3d4,OPd3d5,OPd3d6,OPd3d7	@ 0dd0
	.long OPd3d8,OPd3d9,OPd3da,OPd3db,OPd3dc,OPd3dd,OPd3de,OPd3df	@ 0dd8
	.long OPd3e0,OPd3e1,OPd3e2,OPd3e3,OPd3e4,OPd3e5,OPd3e6,OPd3e7	@ 0de0
	.long OPd3e8,OPd3e9,OPd3ea,OPd3eb,OPd3ec,OPd3ed,OPd3ee,OPd3ef	@ 0de8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0df0
	.long OPd3f8,OPd3f9,OPd3fa,OPd3fb,OPd3fc,OPd3fd,OPd3fe,OPd3ff	@ 0df8

	@ "REPT [?],CW" sub funcs
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e00
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e08
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e10
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e18
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e20
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e28
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e30
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e38
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e40
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e48
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e50
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e58
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e60
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e68
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e70
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e78
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e80
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e88
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e90
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0e98
	.long OP___2,OP___2,OP___2,OP___2,OPf3a4,OPf3a5,OP___2,OP___2	@ 0ea0
	.long OP___2,OP___2,OPf3aa,OPf3ab,OP___2,OP___2,OP___2,OP___2	@ 0ea8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0eb0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0eb8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ec0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ec8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ed0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ed8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ee0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ee8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ef0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0ef8

	@ "PRE 0xF6" sub funcs
	.long OPf600,OPf601,OPf602,OPf603,OPf604,OPf605,OPf606,OPf607	@ 0f00
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0f08
	.long OPf610,OPf611,OPf612,OPf613,OPf614,OPf615,OPf616,OPf617	@ 0f10
	.long OPf618,OPf619,OPf61a,OPf61b,OPf61c,OPf61d,OPf61e,OPf61f	@ 0f18
	.long OPf620,OPf621,OPf622,OPf623,OPf624,OPf625,OPf626,OPf627	@ 0f20
	.long OPf628,OPf629,OPf62a,OPf62b,OPf62c,OPf62d,OPf62e,OPf62f	@ 0f28
	.long OPf630,OPf631,OPf632,OPf633,OPf634,OPf635,OPf636,OPf637	@ 0f30
	.long OPf638,OPf639,OPf63a,OPf63b,OPf63c,OPf63d,OPf63e,OPf63f	@ 0f38
	.long OPf640,OPf641,OPf642,OPf643,OPf644,OPf645,OPf646,OPf647	@ 0f40
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0f48
	.long OPf650,OPf651,OPf652,OPf653,OPf654,OPf655,OPf656,OPf657	@ 0f50
	.long OPf658,OPf659,OPf65a,OPf65b,OPf65c,OPf65d,OPf65e,OPf65f	@ 0f58
	.long OPf660,OPf661,OPf662,OPf663,OPf664,OPf665,OPf666,OPf667	@ 0f60
	.long OPf668,OPf669,OPf66a,OPf66b,OPf66c,OPf66d,OPf66e,OPf66f	@ 0f68
	.long OPf670,OPf671,OPf672,OPf673,OPf674,OPf675,OPf676,OPf677	@ 0f70
	.long OPf678,OPf679,OPf67a,OPf67b,OPf67c,OPf67d,OPf67e,OPf67f	@ 0f78
	.long OPf680,OPf681,OPf682,OPf683,OPf684,OPf685,OPf686,OPf687	@ 0f80
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0f88
	.long OPf690,OPf691,OPf692,OPf693,OPf694,OPf695,OPf696,OPf697	@ 0f90
	.long OPf698,OPf699,OPf69a,OPf69b,OPf69c,OPf69d,OPf69e,OPf69f	@ 0f98
	.long OPf6a0,OPf6a1,OPf6a2,OPf6a3,OPf6a4,OPf6a5,OPf6a6,OPf6a7	@ 0fa0
	.long OPf6a8,OPf6a9,OPf6aa,OPf6ab,OPf6ac,OPf6ad,OPf6ae,OPf6af	@ 0fa8
	.long OPf6b0,OPf6b1,OPf6b2,OPf6b3,OPf6b4,OPf6b5,OPf6b6,OPf6b7	@ 0fb0
	.long OPf6b8,OPf6b9,OPf6ba,OPf6bb,OPf6bc,OPf6bd,OPf6be,OPf6bf	@ 0fb8
	.long OPf6c0,OPf6c1,OPf6c2,OPf6c3,OPf6c4,OPf6c5,OPf6c6,OPf6c7	@ 0fc0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 0fc8
	.long OPf6d0,OPf6d1,OPf6d2,OPf6d3,OPf6d4,OPf6d5,OPf6d6,OPf6d7	@ 0fd0
	.long OPf6d8,OPf6d9,OPf6da,OPf6db,OPf6dc,OPf6dd,OPf6de,OPf6df	@ 0fd8
	.long OPf6e0,OPf6e1,OPf6e2,OPf6e3,OPf6e4,OPf6e5,OPf6e6,OPf6e7	@ 0fe0
	.long OPf6e8,OPf6e9,OPf6ea,OPf6eb,OPf6ec,OPf6ed,OPf6ee,OPf6ef	@ 0fe8
	.long OPf6f0,OPf6f1,OPf6f2,OPf6f3,OPf6f4,OPf6f5,OPf6f6,OPf6f7	@ 0ff0
	.long OPf6f8,OPf6f9,OPf6fa,OPf6fb,OPf6fc,OPf6fd,OPf6fe,OPf6ff	@ 0ff8

	@ "PRE 0xF7" sub funcs
	.long OPf700,OPf701,OPf702,OPf703,OPf704,OPf705,OPf706,OPf707	@ 1000
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1008
	.long OPf710,OPf711,OPf712,OPf713,OPf714,OPf715,OPf716,OPf717	@ 1010
	.long OPf718,OPf719,OPf71a,OPf71b,OPf71c,OPf71d,OPf71e,OPf71f	@ 1018
	.long OPf720,OPf721,OPf722,OPf723,OPf724,OPf725,OPf726,OPf727	@ 1020
	.long OPf728,OPf729,OPf72a,OPf72b,OPf72c,OPf72d,OPf72e,OPf72f	@ 1028
	.long OPf730,OPf731,OPf732,OPf733,OPf734,OPf735,OPf736,OPf737	@ 1030
	.long OPf738,OPf739,OPf73a,OPf73b,OPf73c,OPf73d,OPf73e,OPf73f	@ 1038
	.long OPf740,OPf741,OPf742,OPf743,OPf744,OPf745,OPf746,OPf747	@ 1040
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1048
	.long OPf750,OPf751,OPf752,OPf753,OPf754,OPf755,OPf756,OPf757	@ 1050
	.long OPf758,OPf759,OPf75a,OPf75b,OPf75c,OPf75d,OPf75e,OPf75f	@ 1058
	.long OPf760,OPf761,OPf762,OPf763,OPf764,OPf765,OPf766,OPf767	@ 1060
	.long OPf768,OPf769,OPf76a,OPf76b,OPf76c,OPf76d,OPf76e,OPf76f	@ 1068
	.long OPf770,OPf771,OPf772,OPf773,OPf774,OPf775,OPf776,OPf777	@ 1070
	.long OPf778,OPf779,OPf77a,OPf77b,OPf77c,OPf77d,OPf77e,OPf77f	@ 1078
	.long OPf780,OPf781,OPf782,OPf783,OPf784,OPf785,OPf786,OPf787	@ 1080
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1088
	.long OPf790,OPf791,OPf792,OPf793,OPf794,OPf795,OPf796,OPf797	@ 1090
	.long OPf798,OPf799,OPf79a,OPf79b,OPf79c,OPf79d,OPf79e,OPf79f	@ 1098
	.long OPf7a0,OPf7a1,OPf7a2,OPf7a3,OPf7a4,OPf7a5,OPf7a6,OPf7a7	@ 10a0
	.long OPf7a8,OPf7a9,OPf7aa,OPf7ab,OPf7ac,OPf7ad,OPf7ae,OPf7af	@ 10a8
	.long OPf7b0,OPf7b1,OPf7b2,OPf7b3,OPf7b4,OPf7b5,OPf7b6,OPf7b7	@ 10b0
	.long OPf7b8,OPf7b9,OPf7ba,OPf7bb,OPf7bc,OPf7bd,OPf7be,OPf7bf	@ 10b8
	.long OPf7c0,OPf7c1,OPf7c2,OPf7c3,OPf7c4,OPf7c5,OPf7c6,OPf7c7	@ 10c0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 10c8
	.long OPf7d0,OPf7d1,OPf7d2,OPf7d3,OPf7d4,OPf7d5,OPf7d6,OPf7d7	@ 10d0
	.long OPf7d8,OPf7d9,OPf7da,OPf7db,OPf7dc,OPf7dd,OPf7de,OPf7df	@ 10d8
	.long OPf7e0,OPf7e1,OPf7e2,OPf7e3,OPf7e4,OPf7e5,OPf7e6,OPf7e7	@ 10e0
	.long OPf7e8,OPf7e9,OPf7ea,OPf7eb,OPf7ec,OPf7ed,OPf7ee,OPf7ef	@ 10e8
	.long OPf7f0,OPf7f1,OPf7f2,OPf7f3,OPf7f4,OPf7f5,OPf7f6,OPf7f7	@ 10f0
	.long OPf7f8,OPf7f9,OPf7fa,OPf7fb,OPf7fc,OPf7fd,OPf7fe,OPf7ff	@ 10f8

	@ "PRE 0xFE" sub funcs
	.long OPfe00,OPfe01,OPfe02,OPfe03,OPfe04,OPfe05,OPfe06,OPfe07	@ 1100
	.long OPfe08,OPfe09,OPfe0a,OPfe0b,OPfe0c,OPfe0d,OPfe0e,OPfe0f	@ 1108
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1110
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1118
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1120
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1128
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1130
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1138
	.long OPfe40,OPfe41,OPfe42,OPfe43,OPfe44,OPfe45,OPfe46,OPfe47	@ 1140
	.long OPfe48,OPfe49,OPfe4a,OPfe4b,OPfe4c,OPfe4d,OPfe4e,OPfe4f	@ 1148
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1150
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1158
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1160
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1168
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1170
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1178
	.long OPfe80,OPfe81,OPfe82,OPfe83,OPfe84,OPfe85,OPfe86,OPfe87	@ 1180
	.long OPfe88,OPfe89,OPfe8a,OPfe8b,OPfe8c,OPfe8d,OPfe8e,OPfe8f	@ 1188
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1190
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1198
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11a0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11a8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11b0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11b8
	.long OPfec0,OPfec1,OPfec2,OPfec3,OPfec4,OPfec5,OPfec6,OPfec7	@ 11c0
	.long OPfec8,OPfec9,OPfeca,OPfecb,OPfecc,OPfecd,OPfece,OPfecf	@ 11c8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11d0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11d8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11e0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11e8
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11f0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 11f8

	@ "PRE 0xFF" sub funcs
	.long OPff00,OPff01,OPff02,OPff03,OPff04,OPff05,OPff06,OPff07	@ 1200
	.long OPff08,OPff09,OPff0a,OPff0b,OPff0c,OPff0d,OPff0e,OPff0f	@ 1208
	.long OPff10,OPff11,OPff12,OPff13,OPff14,OPff15,OPff16,OPff17	@ 1210
	.long OPff18,OPff19,OPff1a,OPff1b,OPff1c,OPff1d,OPff1e,OPff1f	@ 1218
	.long OPff20,OPff21,OPff22,OPff23,OPff24,OPff25,OPff26,OPff27	@ 1220
	.long OPff28,OPff29,OPff2a,OPff2b,OPff2c,OPff2d,OPff2e,OPff2f	@ 1228
	.long OPff30,OPff31,OPff32,OPff33,OPff34,OPff35,OPff36,OPff37	@ 1230
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1238
	.long OPff40,OPff41,OPff42,OPff43,OPff44,OPff45,OPff46,OPff47	@ 1240
	.long OPff48,OPff49,OPff4a,OPff4b,OPff4c,OPff4d,OPff4e,OPff4f	@ 1248
	.long OPff50,OPff51,OPff52,OPff53,OPff54,OPff55,OPff56,OPff57	@ 1250
	.long OPff58,OPff59,OPff5a,OPff5b,OPff5c,OPff5d,OPff5e,OPff5f	@ 1258
	.long OPff60,OPff61,OPff62,OPff63,OPff64,OPff65,OPff66,OPff67	@ 1260
	.long OPff68,OPff69,OPff6a,OPff6b,OPff6c,OPff6d,OPff6e,OPff6f	@ 1268
	.long OPff70,OPff71,OPff72,OPff73,OPff74,OPff75,OPff76,OPff77	@ 1270
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 1278
	.long OPff80,OPff81,OPff82,OPff83,OPff84,OPff85,OPff86,OPff87	@ 1280
	.long OPff88,OPff89,OPff8a,OPff8b,OPff8c,OPff8d,OPff8e,OPff8f	@ 1288
	.long OPff90,OPff91,OPff92,OPff93,OPff94,OPff95,OPff96,OPff97	@ 1290
	.long OPff98,OPff99,OPff9a,OPff9b,OPff9c,OPff9d,OPff9e,OPff9f	@ 1298
	.long OPffa0,OPffa1,OPffa2,OPffa3,OPffa4,OPffa5,OPffa6,OPffa7	@ 12a0
	.long OPffa8,OPffa9,OPffaa,OPffab,OPffac,OPffad,OPffae,OPffaf	@ 12a8
	.long OPffb0,OPffb1,OPffb2,OPffb3,OPffb4,OPffb5,OPffb6,OPffb7	@ 12b0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 12b8
	.long OPffc0,OPffc1,OPffc2,OPffc3,OPffc4,OPffc5,OPffc6,OPffc7	@ 12c0
	.long OPffc8,OPffc9,OPffca,OPffcb,OPffcc,OPffcd,OPffce,OPffcf	@ 12c8
	.long OPffd0,OPffd1,OPffd2,OPffd3,OPffd4,OPffd5,OPffd6,OPffd7	@ 12d0
	.long OPffd8,OPffd9,OPffda,OPffdb,OPffdc,OPffdd,OPffde,OPffdf	@ 12d8
	.long OPffe0,OPffe1,OPffe2,OPffe3,OPffe4,OPffe5,OPffe6,OPffe7	@ 12e0
	.long OPffe8,OPffe9,OPffea,OPffeb,OPffec,OPffed,OPffee,OPffef	@ 12e8
	.long OPfff0,OPfff1,OPfff2,OPfff3,OPfff4,OPfff5,OPfff6,OPfff7	@ 12f0
	.long OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2,OP___2	@ 12f8
